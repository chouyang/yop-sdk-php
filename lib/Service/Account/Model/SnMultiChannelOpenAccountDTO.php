<?php
/**
 * SnMultiChannelOpenAccountDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * SnMultiChannelOpenAccountDTO Class Doc Comment
 *
 * @category Class
 * @description 苏宁多渠道参数
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SnMultiChannelOpenAccountDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SnMultiChannelOpenAccountDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bindCardType' => 'string',
        'bindCardNo' => 'string',
        'bindBankCode' => 'string',
        'bindAccountName' => 'string',
        'branchBankNo' => 'string',
        'socialCreditCodeImageUrl' => 'string',
        'legalMobileNo' => 'string',
        'operatorName' => 'string',
        'mobileNo' => 'string',
        'legalCardImageFont' => 'string',
        'legalCardImageBack' => 'string',
        'benefitDTOList' => '\Yeepay\Yop\Sdk\Service\Account\Model\BankAccountBenefitInfoSnDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bindCardType' => null,
        'bindCardNo' => null,
        'bindBankCode' => null,
        'bindAccountName' => null,
        'branchBankNo' => null,
        'socialCreditCodeImageUrl' => null,
        'legalMobileNo' => null,
        'operatorName' => null,
        'mobileNo' => null,
        'legalCardImageFont' => null,
        'legalCardImageBack' => null,
        'benefitDTOList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bindCardType' => 'bindCardType',
        'bindCardNo' => 'bindCardNo',
        'bindBankCode' => 'bindBankCode',
        'bindAccountName' => 'bindAccountName',
        'branchBankNo' => 'branchBankNo',
        'socialCreditCodeImageUrl' => 'socialCreditCodeImageUrl',
        'legalMobileNo' => 'legalMobileNo',
        'operatorName' => 'operatorName',
        'mobileNo' => 'mobileNo',
        'legalCardImageFont' => 'legalCardImageFont',
        'legalCardImageBack' => 'legalCardImageBack',
        'benefitDTOList' => 'benefitDTOList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bindCardType' => 'setBindCardType',
        'bindCardNo' => 'setBindCardNo',
        'bindBankCode' => 'setBindBankCode',
        'bindAccountName' => 'setBindAccountName',
        'branchBankNo' => 'setBranchBankNo',
        'socialCreditCodeImageUrl' => 'setSocialCreditCodeImageUrl',
        'legalMobileNo' => 'setLegalMobileNo',
        'operatorName' => 'setOperatorName',
        'mobileNo' => 'setMobileNo',
        'legalCardImageFont' => 'setLegalCardImageFont',
        'legalCardImageBack' => 'setLegalCardImageBack',
        'benefitDTOList' => 'setBenefitDTOList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bindCardType' => 'getBindCardType',
        'bindCardNo' => 'getBindCardNo',
        'bindBankCode' => 'getBindBankCode',
        'bindAccountName' => 'getBindAccountName',
        'branchBankNo' => 'getBranchBankNo',
        'socialCreditCodeImageUrl' => 'getSocialCreditCodeImageUrl',
        'legalMobileNo' => 'getLegalMobileNo',
        'operatorName' => 'getOperatorName',
        'mobileNo' => 'getMobileNo',
        'legalCardImageFont' => 'getLegalCardImageFont',
        'legalCardImageBack' => 'getLegalCardImageBack',
        'benefitDTOList' => 'getBenefitDTOList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bindCardType'] = isset($data['bindCardType']) ? $data['bindCardType'] : null;
        $this->container['bindCardNo'] = isset($data['bindCardNo']) ? $data['bindCardNo'] : null;
        $this->container['bindBankCode'] = isset($data['bindBankCode']) ? $data['bindBankCode'] : null;
        $this->container['bindAccountName'] = isset($data['bindAccountName']) ? $data['bindAccountName'] : null;
        $this->container['branchBankNo'] = isset($data['branchBankNo']) ? $data['branchBankNo'] : null;
        $this->container['socialCreditCodeImageUrl'] = isset($data['socialCreditCodeImageUrl']) ? $data['socialCreditCodeImageUrl'] : null;
        $this->container['legalMobileNo'] = isset($data['legalMobileNo']) ? $data['legalMobileNo'] : null;
        $this->container['operatorName'] = isset($data['operatorName']) ? $data['operatorName'] : null;
        $this->container['mobileNo'] = isset($data['mobileNo']) ? $data['mobileNo'] : null;
        $this->container['legalCardImageFont'] = isset($data['legalCardImageFont']) ? $data['legalCardImageFont'] : null;
        $this->container['legalCardImageBack'] = isset($data['legalCardImageBack']) ? $data['legalCardImageBack'] : null;
        $this->container['benefitDTOList'] = isset($data['benefitDTOList']) ? $data['benefitDTOList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['socialCreditCodeImageUrl'] === null) {
            $invalidProperties[] = "'socialCreditCodeImageUrl' can't be null";
        }
        if ($this->container['legalMobileNo'] === null) {
            $invalidProperties[] = "'legalMobileNo' can't be null";
        }
        if ($this->container['operatorName'] === null) {
            $invalidProperties[] = "'operatorName' can't be null";
        }
        if ($this->container['mobileNo'] === null) {
            $invalidProperties[] = "'mobileNo' can't be null";
        }
        if ($this->container['legalCardImageFont'] === null) {
            $invalidProperties[] = "'legalCardImageFont' can't be null";
        }
        if ($this->container['legalCardImageBack'] === null) {
            $invalidProperties[] = "'legalCardImageBack' can't be null";
        }
        if ($this->container['benefitDTOList'] === null) {
            $invalidProperties[] = "'benefitDTOList' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bindCardType
     *
     * @return string
     */
    public function getBindCardType()
    {
        return $this->container['bindCardType'];
    }

    /**
     * Sets bindCardType
     *
     * @param string $bindCardType <pre>openAccountType为ENTERPRISE时必填，</pre> <pre>绑定卡类型，只支持对公银行账户：PUBLIC_CARD</pre>
     *
     * @return $this
     */
    public function setBindCardType($bindCardType)
    {
        $this->container['bindCardType'] = $bindCardType;

        return $this;
    }

    /**
     * Gets bindCardNo
     *
     * @return string
     */
    public function getBindCardNo()
    {
        return $this->container['bindCardNo'];
    }

    /**
     * Sets bindCardNo
     *
     * @param string $bindCardNo <p>openAccountType为ENTERPRISE时必填，</p> <p>绑定银行卡号</p>
     *
     * @return $this
     */
    public function setBindCardNo($bindCardNo)
    {
        $this->container['bindCardNo'] = $bindCardNo;

        return $this;
    }

    /**
     * Gets bindBankCode
     *
     * @return string
     */
    public function getBindBankCode()
    {
        return $this->container['bindBankCode'];
    }

    /**
     * Sets bindBankCode
     *
     * @param string $bindBankCode <p>openAccountType为ENTERPRISE时必填，</p> <pre>绑定银行编码</pre>
     *
     * @return $this
     */
    public function setBindBankCode($bindBankCode)
    {
        $this->container['bindBankCode'] = $bindBankCode;

        return $this;
    }

    /**
     * Gets bindAccountName
     *
     * @return string
     */
    public function getBindAccountName()
    {
        return $this->container['bindAccountName'];
    }

    /**
     * Sets bindAccountName
     *
     * @param string $bindAccountName <p>openAccountType为ENTERPRISE时必填，</p> <pre>绑定账户名称</pre>
     *
     * @return $this
     */
    public function setBindAccountName($bindAccountName)
    {
        $this->container['bindAccountName'] = $bindAccountName;

        return $this;
    }

    /**
     * Gets branchBankNo
     *
     * @return string
     */
    public function getBranchBankNo()
    {
        return $this->container['branchBankNo'];
    }

    /**
     * Sets branchBankNo
     *
     * @param string $branchBankNo <p>openAccountType为ENTERPRISE时必填，</p> <p>支行行号</p>
     *
     * @return $this
     */
    public function setBranchBankNo($branchBankNo)
    {
        $this->container['branchBankNo'] = $branchBankNo;

        return $this;
    }

    /**
     * Gets socialCreditCodeImageUrl
     *
     * @return string
     */
    public function getSocialCreditCodeImageUrl()
    {
        return $this->container['socialCreditCodeImageUrl'];
    }

    /**
     * Sets socialCreditCodeImageUrl
     *
     * @param string $socialCreditCodeImageUrl <pre>营业执照图片</pre>
     *
     * @return $this
     */
    public function setSocialCreditCodeImageUrl($socialCreditCodeImageUrl)
    {
        $this->container['socialCreditCodeImageUrl'] = $socialCreditCodeImageUrl;

        return $this;
    }

    /**
     * Gets legalMobileNo
     *
     * @return string
     */
    public function getLegalMobileNo()
    {
        return $this->container['legalMobileNo'];
    }

    /**
     * Sets legalMobileNo
     *
     * @param string $legalMobileNo <pre>法人手机号</pre>
     *
     * @return $this
     */
    public function setLegalMobileNo($legalMobileNo)
    {
        $this->container['legalMobileNo'] = $legalMobileNo;

        return $this;
    }

    /**
     * Gets operatorName
     *
     * @return string
     */
    public function getOperatorName()
    {
        return $this->container['operatorName'];
    }

    /**
     * Sets operatorName
     *
     * @param string $operatorName <pre>经办人姓名</pre>
     *
     * @return $this
     */
    public function setOperatorName($operatorName)
    {
        $this->container['operatorName'] = $operatorName;

        return $this;
    }

    /**
     * Gets mobileNo
     *
     * @return string
     */
    public function getMobileNo()
    {
        return $this->container['mobileNo'];
    }

    /**
     * Sets mobileNo
     *
     * @param string $mobileNo <pre>经办人手机号</pre>
     *
     * @return $this
     */
    public function setMobileNo($mobileNo)
    {
        $this->container['mobileNo'] = $mobileNo;

        return $this;
    }

    /**
     * Gets legalCardImageFont
     *
     * @return string
     */
    public function getLegalCardImageFont()
    {
        return $this->container['legalCardImageFont'];
    }

    /**
     * Sets legalCardImageFont
     *
     * @param string $legalCardImageFont <pre>法人证件照片正面</pre>
     *
     * @return $this
     */
    public function setLegalCardImageFont($legalCardImageFont)
    {
        $this->container['legalCardImageFont'] = $legalCardImageFont;

        return $this;
    }

    /**
     * Gets legalCardImageBack
     *
     * @return string
     */
    public function getLegalCardImageBack()
    {
        return $this->container['legalCardImageBack'];
    }

    /**
     * Sets legalCardImageBack
     *
     * @param string $legalCardImageBack <pre>法人证件照片反面</pre>
     *
     * @return $this
     */
    public function setLegalCardImageBack($legalCardImageBack)
    {
        $this->container['legalCardImageBack'] = $legalCardImageBack;

        return $this;
    }

    /**
     * Gets benefitDTOList
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\BankAccountBenefitInfoSnDTO[]
     */
    public function getBenefitDTOList()
    {
        return $this->container['benefitDTOList'];
    }

    /**
     * Sets benefitDTOList
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\BankAccountBenefitInfoSnDTO[] $benefitDTOList <p>受益人信息</p>
     *
     * @return $this
     */
    public function setBenefitDTOList($benefitDTOList)
    {
        $this->container['benefitDTOList'] = $benefitDTOList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


