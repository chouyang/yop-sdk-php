<?php
/**
 * ReceiverInfoDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * ReceiverInfoDTO Class Doc Comment
 *
 * @category Class
 * @description 付款接收方信息
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReceiverInfoDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReceiverInfoDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receiverAccountName' => 'string',
        'receiverAccountNo' => 'string',
        'bankAccountType' => 'string',
        'receiverBankCode' => 'string',
        'province' => 'string',
        'city' => 'string',
        'branchBankCode' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receiverAccountName' => null,
        'receiverAccountNo' => null,
        'bankAccountType' => 'enum',
        'receiverBankCode' => null,
        'province' => null,
        'city' => null,
        'branchBankCode' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receiverAccountName' => 'receiverAccountName',
        'receiverAccountNo' => 'receiverAccountNo',
        'bankAccountType' => 'bankAccountType',
        'receiverBankCode' => 'receiverBankCode',
        'province' => 'province',
        'city' => 'city',
        'branchBankCode' => 'branchBankCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receiverAccountName' => 'setReceiverAccountName',
        'receiverAccountNo' => 'setReceiverAccountNo',
        'bankAccountType' => 'setBankAccountType',
        'receiverBankCode' => 'setReceiverBankCode',
        'province' => 'setProvince',
        'city' => 'setCity',
        'branchBankCode' => 'setBranchBankCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receiverAccountName' => 'getReceiverAccountName',
        'receiverAccountNo' => 'getReceiverAccountNo',
        'bankAccountType' => 'getBankAccountType',
        'receiverBankCode' => 'getReceiverBankCode',
        'province' => 'getProvince',
        'city' => 'getCity',
        'branchBankCode' => 'getBranchBankCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BANK_ACCOUNT_TYPE_DEBIT_CARD = 'DEBIT_CARD';
    const BANK_ACCOUNT_TYPE_CREDIT_CARD = 'CREDIT_CARD';
    const BANK_ACCOUNT_TYPE_QUASI_CREDIT_CARD = 'QUASI_CREDIT_CARD';
    const BANK_ACCOUNT_TYPE_PASSBOOK = 'PASSBOOK';
    const BANK_ACCOUNT_TYPE_UNIT_SETTLE_CARD = 'UNIT_SETTLE_CARD';
    const BANK_ACCOUNT_TYPE_PUBLIC_CARD = 'PUBLIC_CARD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBankAccountTypeAllowableValues()
    {
        return [
            self::BANK_ACCOUNT_TYPE_DEBIT_CARD,
            self::BANK_ACCOUNT_TYPE_CREDIT_CARD,
            self::BANK_ACCOUNT_TYPE_QUASI_CREDIT_CARD,
            self::BANK_ACCOUNT_TYPE_PASSBOOK,
            self::BANK_ACCOUNT_TYPE_UNIT_SETTLE_CARD,
            self::BANK_ACCOUNT_TYPE_PUBLIC_CARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receiverAccountName'] = isset($data['receiverAccountName']) ? $data['receiverAccountName'] : null;
        $this->container['receiverAccountNo'] = isset($data['receiverAccountNo']) ? $data['receiverAccountNo'] : null;
        $this->container['bankAccountType'] = isset($data['bankAccountType']) ? $data['bankAccountType'] : null;
        $this->container['receiverBankCode'] = isset($data['receiverBankCode']) ? $data['receiverBankCode'] : null;
        $this->container['province'] = isset($data['province']) ? $data['province'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['branchBankCode'] = isset($data['branchBankCode']) ? $data['branchBankCode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['receiverAccountName'] === null) {
            $invalidProperties[] = "'receiverAccountName' can't be null";
        }
        if ($this->container['receiverAccountNo'] === null) {
            $invalidProperties[] = "'receiverAccountNo' can't be null";
        }
        $allowedValues = $this->getBankAccountTypeAllowableValues();
        if (!is_null($this->container['bankAccountType']) && !in_array($this->container['bankAccountType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'bankAccountType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receiverAccountName
     *
     * @return string
     */
    public function getReceiverAccountName()
    {
        return $this->container['receiverAccountName'];
    }

    /**
     * Sets receiverAccountName
     *
     * @param string $receiverAccountName <p>收款方开户名</p>
     *
     * @return $this
     */
    public function setReceiverAccountName($receiverAccountName)
    {
        $this->container['receiverAccountName'] = $receiverAccountName;

        return $this;
    }

    /**
     * Gets receiverAccountNo
     *
     * @return string
     */
    public function getReceiverAccountNo()
    {
        return $this->container['receiverAccountNo'];
    }

    /**
     * Sets receiverAccountNo
     *
     * @param string $receiverAccountNo <p>收款方银行账号:为了保证出款成功，各农信社卡或账号16位以下的农业银行卡，建议或尽可能填写支行编码；</p>
     *
     * @return $this
     */
    public function setReceiverAccountNo($receiverAccountNo)
    {
        $this->container['receiverAccountNo'] = $receiverAccountNo;

        return $this;
    }

    /**
     * Gets bankAccountType
     *
     * @return string
     */
    public function getBankAccountType()
    {
        return $this->container['bankAccountType'];
    }

    /**
     * Sets bankAccountType
     *
     * @param string $bankAccountType <p>银行账户类型</p> 可选项如下: DEBIT_CARD:借记卡  CREDIT_CARD:贷记卡 QUASI_CREDIT_CARD:准贷卡 PASSBOOK:存折 UNIT_SETTLE_CARD:单位结算卡  PUBLIC_CARD:对公卡
     *
     * @return $this
     */
    public function setBankAccountType($bankAccountType)
    {
        $allowedValues = $this->getBankAccountTypeAllowableValues();
        if (!is_null($bankAccountType) && !in_array($bankAccountType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'bankAccountType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bankAccountType'] = $bankAccountType;

        return $this;
    }

    /**
     * Gets receiverBankCode
     *
     * @return string
     */
    public function getReceiverBankCode()
    {
        return $this->container['receiverBankCode'];
    }

    /**
     * Sets receiverBankCode
     *
     * @param string $receiverBankCode <p>收款方开户行银行卡所在开户行编号(对公账户类型，开户行编码/支行编码不能同时为空)</p>
     *
     * @return $this
     */
    public function setReceiverBankCode($receiverBankCode)
    {
        $this->container['receiverBankCode'] = $receiverBankCode;

        return $this;
    }

    /**
     * Gets province
     *
     * @return string
     */
    public function getProvince()
    {
        return $this->container['province'];
    }

    /**
     * Sets province
     *
     * @param string $province <p>省编码</p>
     *
     * @return $this
     */
    public function setProvince($province)
    {
        $this->container['province'] = $province;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city <p>市编码</p>
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets branchBankCode
     *
     * @return string
     */
    public function getBranchBankCode()
    {
        return $this->container['branchBankCode'];
    }

    /**
     * Sets branchBankCode
     *
     * @param string $branchBankCode <p>支行编码(对公账户类型，开户行编码/支行编码不能同时为空)</p>
     *
     * @return $this
     */
    public function setBranchBankCode($branchBankCode)
    {
        $this->container['branchBankCode'] = $branchBankCode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


