<?php
/**
 * BankAccountRefundReqDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * BankAccountRefundReqDTO Class Doc Comment
 *
 * @category Class
 * @description 银行账户申请入金退还入参
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankAccountRefundReqDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankAccountRefundReqDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parentMerchantNo' => 'string',
        'merchantNo' => 'string',
        'refundFlowNo' => 'string',
        'bankSerialNo' => 'string',
        'bankCode' => 'string',
        'bankAccountBookNo' => 'string',
        'refundAmount' => 'float',
        'notifyUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parentMerchantNo' => null,
        'merchantNo' => null,
        'refundFlowNo' => null,
        'bankSerialNo' => null,
        'bankCode' => null,
        'bankAccountBookNo' => null,
        'refundAmount' => null,
        'notifyUrl' => 'notify-url'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantNo' => 'merchantNo',
        'refundFlowNo' => 'refundFlowNo',
        'bankSerialNo' => 'bankSerialNo',
        'bankCode' => 'bankCode',
        'bankAccountBookNo' => 'bankAccountBookNo',
        'refundAmount' => 'refundAmount',
        'notifyUrl' => 'notifyUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'refundFlowNo' => 'setRefundFlowNo',
        'bankSerialNo' => 'setBankSerialNo',
        'bankCode' => 'setBankCode',
        'bankAccountBookNo' => 'setBankAccountBookNo',
        'refundAmount' => 'setRefundAmount',
        'notifyUrl' => 'setNotifyUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'refundFlowNo' => 'getRefundFlowNo',
        'bankSerialNo' => 'getBankSerialNo',
        'bankCode' => 'getBankCode',
        'bankAccountBookNo' => 'getBankAccountBookNo',
        'refundAmount' => 'getRefundAmount',
        'notifyUrl' => 'getNotifyUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['refundFlowNo'] = isset($data['refundFlowNo']) ? $data['refundFlowNo'] : null;
        $this->container['bankSerialNo'] = isset($data['bankSerialNo']) ? $data['bankSerialNo'] : null;
        $this->container['bankCode'] = isset($data['bankCode']) ? $data['bankCode'] : null;
        $this->container['bankAccountBookNo'] = isset($data['bankAccountBookNo']) ? $data['bankAccountBookNo'] : null;
        $this->container['refundAmount'] = isset($data['refundAmount']) ? $data['refundAmount'] : null;
        $this->container['notifyUrl'] = isset($data['notifyUrl']) ? $data['notifyUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['parentMerchantNo'] === null) {
            $invalidProperties[] = "'parentMerchantNo' can't be null";
        }
        if ($this->container['merchantNo'] === null) {
            $invalidProperties[] = "'merchantNo' can't be null";
        }
        if ($this->container['refundFlowNo'] === null) {
            $invalidProperties[] = "'refundFlowNo' can't be null";
        }
        if ($this->container['bankSerialNo'] === null) {
            $invalidProperties[] = "'bankSerialNo' can't be null";
        }
        if ($this->container['bankCode'] === null) {
            $invalidProperties[] = "'bankCode' can't be null";
        }
        if ($this->container['bankAccountBookNo'] === null) {
            $invalidProperties[] = "'bankAccountBookNo' can't be null";
        }
        if ($this->container['refundAmount'] === null) {
            $invalidProperties[] = "'refundAmount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo <p>业务发起方商编<br />*标准商户收付款方案中此参数与开户商户编号一致；*平台商户收付款方案中此参数为平台商商户编号；*服务商解决方案中，①所属标准商户申请开户时，该参数为服务商商编 ②所属平台商申请开户且以服务资质在银行开立母户时，此参数填写服务商商户编号 ②所属平台商入驻商户申请开户时需以平台资质在银行开立母户，该参数填写平台商商编</p>
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo <p>商户编号<br />易宝支付分配的的商户唯一标识</p>
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets refundFlowNo
     *
     * @return string
     */
    public function getRefundFlowNo()
    {
        return $this->container['refundFlowNo'];
    }

    /**
     * Sets refundFlowNo
     *
     * @param string $refundFlowNo <pre>商户退回请求号<br />由商户自定义生成</pre>
     *
     * @return $this
     */
    public function setRefundFlowNo($refundFlowNo)
    {
        $this->container['refundFlowNo'] = $refundFlowNo;

        return $this;
    }

    /**
     * Gets bankSerialNo
     *
     * @return string
     */
    public function getBankSerialNo()
    {
        return $this->container['bankSerialNo'];
    }

    /**
     * Sets bankSerialNo
     *
     * @param string $bankSerialNo <pre>银行流水号,入金通知里对应的银行流水号</pre>
     *
     * @return $this
     */
    public function setBankSerialNo($bankSerialNo)
    {
        $this->container['bankSerialNo'] = $bankSerialNo;

        return $this;
    }

    /**
     * Gets bankCode
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->container['bankCode'];
    }

    /**
     * Sets bankCode
     *
     * @param string $bankCode <pre>开户银行编码</pre> <p>可选项如下：</p> <pre>SMB_LARGE</pre>
     *
     * @return $this
     */
    public function setBankCode($bankCode)
    {
        $this->container['bankCode'] = $bankCode;

        return $this;
    }

    /**
     * Gets bankAccountBookNo
     *
     * @return string
     */
    public function getBankAccountBookNo()
    {
        return $this->container['bankAccountBookNo'];
    }

    /**
     * Sets bankAccountBookNo
     *
     * @param string $bankAccountBookNo <p>缴费账户号</p>
     *
     * @return $this
     */
    public function setBankAccountBookNo($bankAccountBookNo)
    {
        $this->container['bankAccountBookNo'] = $bankAccountBookNo;

        return $this;
    }

    /**
     * Gets refundAmount
     *
     * @return float
     */
    public function getRefundAmount()
    {
        return $this->container['refundAmount'];
    }

    /**
     * Sets refundAmount
     *
     * @param float $refundAmount <pre>退回金额<br />单位：元（RMB）</pre>
     *
     * @return $this
     */
    public function setRefundAmount($refundAmount)
    {
        $this->container['refundAmount'] = $refundAmount;

        return $this;
    }

    /**
     * Gets notifyUrl
     *
     * @return string
     */
    public function getNotifyUrl()
    {
        return $this->container['notifyUrl'];
    }

    /**
     * Sets notifyUrl
     *
     * @param string $notifyUrl <p>回调通知地址<br />商户通知地址，不传则不通知回调内容请查看结果通知</p>
     *
     * @return $this
     */
    public function setNotifyUrl($notifyUrl)
    {
        $this->container['notifyUrl'] = $notifyUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


