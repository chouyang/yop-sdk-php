<?php
/**
 * BankAccountTrxDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * BankAccountTrxDTO Class Doc Comment
 *
 * @category Class
 * @description 银行流水详情
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankAccountTrxDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankAccountTrxDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bankCode' => 'string',
        'bankAccountNo' => 'string',
        'bankSerialNo' => 'string',
        'loanFlag' => 'string',
        'tradeStatus' => 'string',
        'trxDateTime' => 'string',
        'amount' => 'string',
        'counterpartyAccountNo' => 'string',
        'counterpartyAccountName' => 'string',
        'comments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bankCode' => null,
        'bankAccountNo' => null,
        'bankSerialNo' => null,
        'loanFlag' => 'enum',
        'tradeStatus' => 'enum',
        'trxDateTime' => null,
        'amount' => null,
        'counterpartyAccountNo' => null,
        'counterpartyAccountName' => null,
        'comments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankCode' => 'bankCode',
        'bankAccountNo' => 'bankAccountNo',
        'bankSerialNo' => 'bankSerialNo',
        'loanFlag' => 'loanFlag',
        'tradeStatus' => 'tradeStatus',
        'trxDateTime' => 'trxDateTime',
        'amount' => 'amount',
        'counterpartyAccountNo' => 'counterpartyAccountNo',
        'counterpartyAccountName' => 'counterpartyAccountName',
        'comments' => 'comments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankCode' => 'setBankCode',
        'bankAccountNo' => 'setBankAccountNo',
        'bankSerialNo' => 'setBankSerialNo',
        'loanFlag' => 'setLoanFlag',
        'tradeStatus' => 'setTradeStatus',
        'trxDateTime' => 'setTrxDateTime',
        'amount' => 'setAmount',
        'counterpartyAccountNo' => 'setCounterpartyAccountNo',
        'counterpartyAccountName' => 'setCounterpartyAccountName',
        'comments' => 'setComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankCode' => 'getBankCode',
        'bankAccountNo' => 'getBankAccountNo',
        'bankSerialNo' => 'getBankSerialNo',
        'loanFlag' => 'getLoanFlag',
        'tradeStatus' => 'getTradeStatus',
        'trxDateTime' => 'getTrxDateTime',
        'amount' => 'getAmount',
        'counterpartyAccountNo' => 'getCounterpartyAccountNo',
        'counterpartyAccountName' => 'getCounterpartyAccountName',
        'comments' => 'getComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOAN_FLAG_DEBIT = 'DEBIT';
    const LOAN_FLAG_CREDIT = 'CREDIT';
    const TRADE_STATUS_SUCCESS = 'SUCCESS';
    const TRADE_STATUS_FAIL = 'FAIL';
    const TRADE_STATUS_REVERSE = 'REVERSE';
    const TRADE_STATUS_BE_REVERSE = 'BE_REVERSE';
    const TRADE_STATUS_UNKNOW = 'UNKNOW';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLoanFlagAllowableValues()
    {
        return [
            self::LOAN_FLAG_DEBIT,
            self::LOAN_FLAG_CREDIT,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTradeStatusAllowableValues()
    {
        return [
            self::TRADE_STATUS_SUCCESS,
            self::TRADE_STATUS_FAIL,
            self::TRADE_STATUS_REVERSE,
            self::TRADE_STATUS_BE_REVERSE,
            self::TRADE_STATUS_UNKNOW,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bankCode'] = isset($data['bankCode']) ? $data['bankCode'] : null;
        $this->container['bankAccountNo'] = isset($data['bankAccountNo']) ? $data['bankAccountNo'] : null;
        $this->container['bankSerialNo'] = isset($data['bankSerialNo']) ? $data['bankSerialNo'] : null;
        $this->container['loanFlag'] = isset($data['loanFlag']) ? $data['loanFlag'] : null;
        $this->container['tradeStatus'] = isset($data['tradeStatus']) ? $data['tradeStatus'] : null;
        $this->container['trxDateTime'] = isset($data['trxDateTime']) ? $data['trxDateTime'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['counterpartyAccountNo'] = isset($data['counterpartyAccountNo']) ? $data['counterpartyAccountNo'] : null;
        $this->container['counterpartyAccountName'] = isset($data['counterpartyAccountName']) ? $data['counterpartyAccountName'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['bankCode'] === null) {
            $invalidProperties[] = "'bankCode' can't be null";
        }
        if ($this->container['bankAccountNo'] === null) {
            $invalidProperties[] = "'bankAccountNo' can't be null";
        }
        if ($this->container['bankSerialNo'] === null) {
            $invalidProperties[] = "'bankSerialNo' can't be null";
        }
        if ($this->container['loanFlag'] === null) {
            $invalidProperties[] = "'loanFlag' can't be null";
        }
        $allowedValues = $this->getLoanFlagAllowableValues();
        if (!is_null($this->container['loanFlag']) && !in_array($this->container['loanFlag'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'loanFlag', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tradeStatus'] === null) {
            $invalidProperties[] = "'tradeStatus' can't be null";
        }
        $allowedValues = $this->getTradeStatusAllowableValues();
        if (!is_null($this->container['tradeStatus']) && !in_array($this->container['tradeStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tradeStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['trxDateTime'] === null) {
            $invalidProperties[] = "'trxDateTime' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankCode
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->container['bankCode'];
    }

    /**
     * Sets bankCode
     *
     * @param string $bankCode <p>银行编码</p>
     *
     * @return $this
     */
    public function setBankCode($bankCode)
    {
        $this->container['bankCode'] = $bankCode;

        return $this;
    }

    /**
     * Gets bankAccountNo
     *
     * @return string
     */
    public function getBankAccountNo()
    {
        return $this->container['bankAccountNo'];
    }

    /**
     * Sets bankAccountNo
     *
     * @param string $bankAccountNo <p>银行账户号</p>
     *
     * @return $this
     */
    public function setBankAccountNo($bankAccountNo)
    {
        $this->container['bankAccountNo'] = $bankAccountNo;

        return $this;
    }

    /**
     * Gets bankSerialNo
     *
     * @return string
     */
    public function getBankSerialNo()
    {
        return $this->container['bankSerialNo'];
    }

    /**
     * Sets bankSerialNo
     *
     * @param string $bankSerialNo <p>银行流水号</p>
     *
     * @return $this
     */
    public function setBankSerialNo($bankSerialNo)
    {
        $this->container['bankSerialNo'] = $bankSerialNo;

        return $this;
    }

    /**
     * Gets loanFlag
     *
     * @return string
     */
    public function getLoanFlag()
    {
        return $this->container['loanFlag'];
    }

    /**
     * Sets loanFlag
     *
     * @param string $loanFlag <p>资金方向</p> 可选项如下: DEBIT:出金 CREDIT:入金
     *
     * @return $this
     */
    public function setLoanFlag($loanFlag)
    {
        $allowedValues = $this->getLoanFlagAllowableValues();
        if (!in_array($loanFlag, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'loanFlag', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['loanFlag'] = $loanFlag;

        return $this;
    }

    /**
     * Gets tradeStatus
     *
     * @return string
     */
    public function getTradeStatus()
    {
        return $this->container['tradeStatus'];
    }

    /**
     * Sets tradeStatus
     *
     * @param string $tradeStatus <p>交易状态</p> 可选项如下: SUCCESS:成功 FAIL:失败 REVERSE:冲正 BE_REVERSE:被冲正 UNKNOW:未知
     *
     * @return $this
     */
    public function setTradeStatus($tradeStatus)
    {
        $allowedValues = $this->getTradeStatusAllowableValues();
        if (!in_array($tradeStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tradeStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tradeStatus'] = $tradeStatus;

        return $this;
    }

    /**
     * Gets trxDateTime
     *
     * @return string
     */
    public function getTrxDateTime()
    {
        return $this->container['trxDateTime'];
    }

    /**
     * Sets trxDateTime
     *
     * @param string $trxDateTime <p>交易时间<br />格式：yyyy-MM-dd HH:mm:ss</p>
     *
     * @return $this
     */
    public function setTrxDateTime($trxDateTime)
    {
        $this->container['trxDateTime'] = $trxDateTime;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount <p>交易金额</p>
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets counterpartyAccountNo
     *
     * @return string
     */
    public function getCounterpartyAccountNo()
    {
        return $this->container['counterpartyAccountNo'];
    }

    /**
     * Sets counterpartyAccountNo
     *
     * @param string $counterpartyAccountNo <p>对手方账户号</p>
     *
     * @return $this
     */
    public function setCounterpartyAccountNo($counterpartyAccountNo)
    {
        $this->container['counterpartyAccountNo'] = $counterpartyAccountNo;

        return $this;
    }

    /**
     * Gets counterpartyAccountName
     *
     * @return string
     */
    public function getCounterpartyAccountName()
    {
        return $this->container['counterpartyAccountName'];
    }

    /**
     * Sets counterpartyAccountName
     *
     * @param string $counterpartyAccountName <p>对手方账户名称</p>
     *
     * @return $this
     */
    public function setCounterpartyAccountName($counterpartyAccountName)
    {
        $this->container['counterpartyAccountName'] = $counterpartyAccountName;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments <p>附言</p>
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


