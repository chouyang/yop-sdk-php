<?php
/**
 * HxbxbOpenAccountDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * HxbxbOpenAccountDTO Class Doc Comment
 *
 * @category Class
 * @description 银行拓展参数&lt;br&gt;银行编码为HXBXB_GATHER时必填
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HxbxbOpenAccountDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HxbxbOpenAccountDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'deviceIp' => 'string',
        'deviceMac' => 'string',
        'businessScope' => 'string',
        'magAddress' => 'string',
        'contactName' => 'string',
        'contactMobile' => 'string',
        'contactCardType' => 'string',
        'contactCardNo' => 'string',
        'contactCardStartDate' => 'string',
        'contactCardExpireDate' => 'string',
        'contactCardImageFont' => 'string',
        'contactCardImageBack' => 'string',
        'legalMobile' => 'string',
        'legalLicenceEffectiveDate' => 'string',
        'legalLicenceExpirationDate' => 'string',
        'legalContactAddress' => 'string',
        'legalCardImageFont' => 'string',
        'legalCardImageBack' => 'string',
        'benefitDTOList' => '\Yeepay\Yop\Sdk\Service\Account\Model\BenefitInfoHxbxbDTO[]',
        'shareholderDTOList' => '\Yeepay\Yop\Sdk\Service\Account\Model\ShareHolderHxbxbDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'deviceIp' => null,
        'deviceMac' => null,
        'businessScope' => null,
        'magAddress' => null,
        'contactName' => null,
        'contactMobile' => null,
        'contactCardType' => null,
        'contactCardNo' => null,
        'contactCardStartDate' => null,
        'contactCardExpireDate' => null,
        'contactCardImageFont' => null,
        'contactCardImageBack' => null,
        'legalMobile' => null,
        'legalLicenceEffectiveDate' => null,
        'legalLicenceExpirationDate' => null,
        'legalContactAddress' => null,
        'legalCardImageFont' => null,
        'legalCardImageBack' => null,
        'benefitDTOList' => null,
        'shareholderDTOList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'deviceIp' => 'deviceIp',
        'deviceMac' => 'deviceMac',
        'businessScope' => 'businessScope',
        'magAddress' => 'magAddress',
        'contactName' => 'contactName',
        'contactMobile' => 'contactMobile',
        'contactCardType' => 'contactCardType',
        'contactCardNo' => 'contactCardNo',
        'contactCardStartDate' => 'contactCardStartDate',
        'contactCardExpireDate' => 'contactCardExpireDate',
        'contactCardImageFont' => 'contactCardImageFont',
        'contactCardImageBack' => 'contactCardImageBack',
        'legalMobile' => 'legalMobile',
        'legalLicenceEffectiveDate' => 'legalLicenceEffectiveDate',
        'legalLicenceExpirationDate' => 'legalLicenceExpirationDate',
        'legalContactAddress' => 'legalContactAddress',
        'legalCardImageFont' => 'legalCardImageFont',
        'legalCardImageBack' => 'legalCardImageBack',
        'benefitDTOList' => 'benefitDTOList',
        'shareholderDTOList' => 'shareholderDTOList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'deviceIp' => 'setDeviceIp',
        'deviceMac' => 'setDeviceMac',
        'businessScope' => 'setBusinessScope',
        'magAddress' => 'setMagAddress',
        'contactName' => 'setContactName',
        'contactMobile' => 'setContactMobile',
        'contactCardType' => 'setContactCardType',
        'contactCardNo' => 'setContactCardNo',
        'contactCardStartDate' => 'setContactCardStartDate',
        'contactCardExpireDate' => 'setContactCardExpireDate',
        'contactCardImageFont' => 'setContactCardImageFont',
        'contactCardImageBack' => 'setContactCardImageBack',
        'legalMobile' => 'setLegalMobile',
        'legalLicenceEffectiveDate' => 'setLegalLicenceEffectiveDate',
        'legalLicenceExpirationDate' => 'setLegalLicenceExpirationDate',
        'legalContactAddress' => 'setLegalContactAddress',
        'legalCardImageFont' => 'setLegalCardImageFont',
        'legalCardImageBack' => 'setLegalCardImageBack',
        'benefitDTOList' => 'setBenefitDTOList',
        'shareholderDTOList' => 'setShareholderDTOList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'deviceIp' => 'getDeviceIp',
        'deviceMac' => 'getDeviceMac',
        'businessScope' => 'getBusinessScope',
        'magAddress' => 'getMagAddress',
        'contactName' => 'getContactName',
        'contactMobile' => 'getContactMobile',
        'contactCardType' => 'getContactCardType',
        'contactCardNo' => 'getContactCardNo',
        'contactCardStartDate' => 'getContactCardStartDate',
        'contactCardExpireDate' => 'getContactCardExpireDate',
        'contactCardImageFont' => 'getContactCardImageFont',
        'contactCardImageBack' => 'getContactCardImageBack',
        'legalMobile' => 'getLegalMobile',
        'legalLicenceEffectiveDate' => 'getLegalLicenceEffectiveDate',
        'legalLicenceExpirationDate' => 'getLegalLicenceExpirationDate',
        'legalContactAddress' => 'getLegalContactAddress',
        'legalCardImageFont' => 'getLegalCardImageFont',
        'legalCardImageBack' => 'getLegalCardImageBack',
        'benefitDTOList' => 'getBenefitDTOList',
        'shareholderDTOList' => 'getShareholderDTOList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['deviceIp'] = isset($data['deviceIp']) ? $data['deviceIp'] : null;
        $this->container['deviceMac'] = isset($data['deviceMac']) ? $data['deviceMac'] : null;
        $this->container['businessScope'] = isset($data['businessScope']) ? $data['businessScope'] : null;
        $this->container['magAddress'] = isset($data['magAddress']) ? $data['magAddress'] : null;
        $this->container['contactName'] = isset($data['contactName']) ? $data['contactName'] : null;
        $this->container['contactMobile'] = isset($data['contactMobile']) ? $data['contactMobile'] : null;
        $this->container['contactCardType'] = isset($data['contactCardType']) ? $data['contactCardType'] : null;
        $this->container['contactCardNo'] = isset($data['contactCardNo']) ? $data['contactCardNo'] : null;
        $this->container['contactCardStartDate'] = isset($data['contactCardStartDate']) ? $data['contactCardStartDate'] : null;
        $this->container['contactCardExpireDate'] = isset($data['contactCardExpireDate']) ? $data['contactCardExpireDate'] : null;
        $this->container['contactCardImageFont'] = isset($data['contactCardImageFont']) ? $data['contactCardImageFont'] : null;
        $this->container['contactCardImageBack'] = isset($data['contactCardImageBack']) ? $data['contactCardImageBack'] : null;
        $this->container['legalMobile'] = isset($data['legalMobile']) ? $data['legalMobile'] : null;
        $this->container['legalLicenceEffectiveDate'] = isset($data['legalLicenceEffectiveDate']) ? $data['legalLicenceEffectiveDate'] : null;
        $this->container['legalLicenceExpirationDate'] = isset($data['legalLicenceExpirationDate']) ? $data['legalLicenceExpirationDate'] : null;
        $this->container['legalContactAddress'] = isset($data['legalContactAddress']) ? $data['legalContactAddress'] : null;
        $this->container['legalCardImageFont'] = isset($data['legalCardImageFont']) ? $data['legalCardImageFont'] : null;
        $this->container['legalCardImageBack'] = isset($data['legalCardImageBack']) ? $data['legalCardImageBack'] : null;
        $this->container['benefitDTOList'] = isset($data['benefitDTOList']) ? $data['benefitDTOList'] : null;
        $this->container['shareholderDTOList'] = isset($data['shareholderDTOList']) ? $data['shareholderDTOList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['businessScope'] === null) {
            $invalidProperties[] = "'businessScope' can't be null";
        }
        if ($this->container['magAddress'] === null) {
            $invalidProperties[] = "'magAddress' can't be null";
        }
        if ($this->container['contactName'] === null) {
            $invalidProperties[] = "'contactName' can't be null";
        }
        if ($this->container['contactMobile'] === null) {
            $invalidProperties[] = "'contactMobile' can't be null";
        }
        if ($this->container['contactCardType'] === null) {
            $invalidProperties[] = "'contactCardType' can't be null";
        }
        if ($this->container['contactCardNo'] === null) {
            $invalidProperties[] = "'contactCardNo' can't be null";
        }
        if ($this->container['contactCardStartDate'] === null) {
            $invalidProperties[] = "'contactCardStartDate' can't be null";
        }
        if ($this->container['contactCardExpireDate'] === null) {
            $invalidProperties[] = "'contactCardExpireDate' can't be null";
        }
        if ($this->container['contactCardImageFont'] === null) {
            $invalidProperties[] = "'contactCardImageFont' can't be null";
        }
        if ($this->container['contactCardImageBack'] === null) {
            $invalidProperties[] = "'contactCardImageBack' can't be null";
        }
        if ($this->container['legalMobile'] === null) {
            $invalidProperties[] = "'legalMobile' can't be null";
        }
        if ($this->container['legalLicenceEffectiveDate'] === null) {
            $invalidProperties[] = "'legalLicenceEffectiveDate' can't be null";
        }
        if ($this->container['legalLicenceExpirationDate'] === null) {
            $invalidProperties[] = "'legalLicenceExpirationDate' can't be null";
        }
        if ($this->container['legalContactAddress'] === null) {
            $invalidProperties[] = "'legalContactAddress' can't be null";
        }
        if ($this->container['legalCardImageFont'] === null) {
            $invalidProperties[] = "'legalCardImageFont' can't be null";
        }
        if ($this->container['legalCardImageBack'] === null) {
            $invalidProperties[] = "'legalCardImageBack' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets deviceIp
     *
     * @return string
     */
    public function getDeviceIp()
    {
        return $this->container['deviceIp'];
    }

    /**
     * Sets deviceIp
     *
     * @param string $deviceIp <p>设备IP</p>
     *
     * @return $this
     */
    public function setDeviceIp($deviceIp)
    {
        $this->container['deviceIp'] = $deviceIp;

        return $this;
    }

    /**
     * Gets deviceMac
     *
     * @return string
     */
    public function getDeviceMac()
    {
        return $this->container['deviceMac'];
    }

    /**
     * Sets deviceMac
     *
     * @param string $deviceMac <p>设备Mac地址</p>
     *
     * @return $this
     */
    public function setDeviceMac($deviceMac)
    {
        $this->container['deviceMac'] = $deviceMac;

        return $this;
    }

    /**
     * Gets businessScope
     *
     * @return string
     */
    public function getBusinessScope()
    {
        return $this->container['businessScope'];
    }

    /**
     * Sets businessScope
     *
     * @param string $businessScope <p>经营范围</p>
     *
     * @return $this
     */
    public function setBusinessScope($businessScope)
    {
        $this->container['businessScope'] = $businessScope;

        return $this;
    }

    /**
     * Gets magAddress
     *
     * @return string
     */
    public function getMagAddress()
    {
        return $this->container['magAddress'];
    }

    /**
     * Sets magAddress
     *
     * @param string $magAddress <p>企业实际经营地址</p>
     *
     * @return $this
     */
    public function setMagAddress($magAddress)
    {
        $this->container['magAddress'] = $magAddress;

        return $this;
    }

    /**
     * Gets contactName
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contactName'];
    }

    /**
     * Sets contactName
     *
     * @param string $contactName <p>联系人姓名</p>
     *
     * @return $this
     */
    public function setContactName($contactName)
    {
        $this->container['contactName'] = $contactName;

        return $this;
    }

    /**
     * Gets contactMobile
     *
     * @return string
     */
    public function getContactMobile()
    {
        return $this->container['contactMobile'];
    }

    /**
     * Sets contactMobile
     *
     * @param string $contactMobile <p>联系人手机号</p>
     *
     * @return $this
     */
    public function setContactMobile($contactMobile)
    {
        $this->container['contactMobile'] = $contactMobile;

        return $this;
    }

    /**
     * Gets contactCardType
     *
     * @return string
     */
    public function getContactCardType()
    {
        return $this->container['contactCardType'];
    }

    /**
     * Sets contactCardType
     *
     * @param string $contactCardType <p>联系人证件类型不支持<br />可选项如下:<br />ID_CARD:身份证</p>
     *
     * @return $this
     */
    public function setContactCardType($contactCardType)
    {
        $this->container['contactCardType'] = $contactCardType;

        return $this;
    }

    /**
     * Gets contactCardNo
     *
     * @return string
     */
    public function getContactCardNo()
    {
        return $this->container['contactCardNo'];
    }

    /**
     * Sets contactCardNo
     *
     * @param string $contactCardNo <p>联系人证件号码</p>
     *
     * @return $this
     */
    public function setContactCardNo($contactCardNo)
    {
        $this->container['contactCardNo'] = $contactCardNo;

        return $this;
    }

    /**
     * Gets contactCardStartDate
     *
     * @return string
     */
    public function getContactCardStartDate()
    {
        return $this->container['contactCardStartDate'];
    }

    /**
     * Sets contactCardStartDate
     *
     * @param string $contactCardStartDate <p>联系人证件生效日期<br />参数格式为yyyyMMdd</p>
     *
     * @return $this
     */
    public function setContactCardStartDate($contactCardStartDate)
    {
        $this->container['contactCardStartDate'] = $contactCardStartDate;

        return $this;
    }

    /**
     * Gets contactCardExpireDate
     *
     * @return string
     */
    public function getContactCardExpireDate()
    {
        return $this->container['contactCardExpireDate'];
    }

    /**
     * Sets contactCardExpireDate
     *
     * @param string $contactCardExpireDate <p>联系人证件失效日期<br />参数格式为yyyyMMdd或者forever</p>
     *
     * @return $this
     */
    public function setContactCardExpireDate($contactCardExpireDate)
    {
        $this->container['contactCardExpireDate'] = $contactCardExpireDate;

        return $this;
    }

    /**
     * Gets contactCardImageFont
     *
     * @return string
     */
    public function getContactCardImageFont()
    {
        return $this->container['contactCardImageFont'];
    }

    /**
     * Sets contactCardImageFont
     *
     * @param string $contactCardImageFont <p>联系人证件照片正面地址</p>
     *
     * @return $this
     */
    public function setContactCardImageFont($contactCardImageFont)
    {
        $this->container['contactCardImageFont'] = $contactCardImageFont;

        return $this;
    }

    /**
     * Gets contactCardImageBack
     *
     * @return string
     */
    public function getContactCardImageBack()
    {
        return $this->container['contactCardImageBack'];
    }

    /**
     * Sets contactCardImageBack
     *
     * @param string $contactCardImageBack <p>联系人证件照片反面地址</p>
     *
     * @return $this
     */
    public function setContactCardImageBack($contactCardImageBack)
    {
        $this->container['contactCardImageBack'] = $contactCardImageBack;

        return $this;
    }

    /**
     * Gets legalMobile
     *
     * @return string
     */
    public function getLegalMobile()
    {
        return $this->container['legalMobile'];
    }

    /**
     * Sets legalMobile
     *
     * @param string $legalMobile <p>法人手机号码</p>
     *
     * @return $this
     */
    public function setLegalMobile($legalMobile)
    {
        $this->container['legalMobile'] = $legalMobile;

        return $this;
    }

    /**
     * Gets legalLicenceEffectiveDate
     *
     * @return string
     */
    public function getLegalLicenceEffectiveDate()
    {
        return $this->container['legalLicenceEffectiveDate'];
    }

    /**
     * Sets legalLicenceEffectiveDate
     *
     * @param string $legalLicenceEffectiveDate <p>法人证件生效日期<br />参数格式为yyyyMMdd</p>
     *
     * @return $this
     */
    public function setLegalLicenceEffectiveDate($legalLicenceEffectiveDate)
    {
        $this->container['legalLicenceEffectiveDate'] = $legalLicenceEffectiveDate;

        return $this;
    }

    /**
     * Gets legalLicenceExpirationDate
     *
     * @return string
     */
    public function getLegalLicenceExpirationDate()
    {
        return $this->container['legalLicenceExpirationDate'];
    }

    /**
     * Sets legalLicenceExpirationDate
     *
     * @param string $legalLicenceExpirationDate <p>法人证件失效日期<br />参数格式为yyyyMMdd或者forever</p>
     *
     * @return $this
     */
    public function setLegalLicenceExpirationDate($legalLicenceExpirationDate)
    {
        $this->container['legalLicenceExpirationDate'] = $legalLicenceExpirationDate;

        return $this;
    }

    /**
     * Gets legalContactAddress
     *
     * @return string
     */
    public function getLegalContactAddress()
    {
        return $this->container['legalContactAddress'];
    }

    /**
     * Sets legalContactAddress
     *
     * @param string $legalContactAddress <p>法人联系地址</p>
     *
     * @return $this
     */
    public function setLegalContactAddress($legalContactAddress)
    {
        $this->container['legalContactAddress'] = $legalContactAddress;

        return $this;
    }

    /**
     * Gets legalCardImageFont
     *
     * @return string
     */
    public function getLegalCardImageFont()
    {
        return $this->container['legalCardImageFont'];
    }

    /**
     * Sets legalCardImageFont
     *
     * @param string $legalCardImageFont <p>法人证件照片正面地址</p>
     *
     * @return $this
     */
    public function setLegalCardImageFont($legalCardImageFont)
    {
        $this->container['legalCardImageFont'] = $legalCardImageFont;

        return $this;
    }

    /**
     * Gets legalCardImageBack
     *
     * @return string
     */
    public function getLegalCardImageBack()
    {
        return $this->container['legalCardImageBack'];
    }

    /**
     * Sets legalCardImageBack
     *
     * @param string $legalCardImageBack <p>法人证件照片反面地址</p>
     *
     * @return $this
     */
    public function setLegalCardImageBack($legalCardImageBack)
    {
        $this->container['legalCardImageBack'] = $legalCardImageBack;

        return $this;
    }

    /**
     * Gets benefitDTOList
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\BenefitInfoHxbxbDTO[]
     */
    public function getBenefitDTOList()
    {
        return $this->container['benefitDTOList'];
    }

    /**
     * Sets benefitDTOList
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\BenefitInfoHxbxbDTO[] $benefitDTOList <p>收益人信息<br />开立账户类型为企业时必填且只能填写一个</p>
     *
     * @return $this
     */
    public function setBenefitDTOList($benefitDTOList)
    {
        $this->container['benefitDTOList'] = $benefitDTOList;

        return $this;
    }

    /**
     * Gets shareholderDTOList
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\ShareHolderHxbxbDTO[]
     */
    public function getShareholderDTOList()
    {
        return $this->container['shareholderDTOList'];
    }

    /**
     * Sets shareholderDTOList
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\ShareHolderHxbxbDTO[] $shareholderDTOList <p>股东信息<br />开立账户类型为企业时必填且只能填写一个</p> <p>分公司、分店无股东场景下,传入总公司股东</p>
     *
     * @return $this
     */
    public function setShareholderDTOList($shareholderDTOList)
    {
        $this->container['shareholderDTOList'] = $shareholderDTOList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


