<?php
/**
 * OverseasPayConfirmPayerInfoDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 无卡交易系统
 *
 * <p>中台的无卡交易系统(Card Not Present)，包含调用统一订单OPR下单及无卡支付服务NCPAY支付的流程</p>
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Cnppay\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * OverseasPayConfirmPayerInfoDTOResult Class Doc Comment
 *
 * @category Class
 * @description 
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OverseasPayConfirmPayerInfoDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OverseasPayConfirmPayerInfoDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bankId' => 'string',
        'cardType' => 'string',
        'bankCardNo' => 'string',
        'bankCardNoFirst6' => 'string',
        'bankCardNoLast4' => 'string',
        'mobilePhoneNo' => 'string',
        'bindId' => 'string',
        'cardName' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bankId' => null,
        'cardType' => null,
        'bankCardNo' => null,
        'bankCardNoFirst6' => null,
        'bankCardNoLast4' => null,
        'mobilePhoneNo' => null,
        'bindId' => null,
        'cardName' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bankId' => 'bankId',
        'cardType' => 'cardType',
        'bankCardNo' => 'bankCardNo',
        'bankCardNoFirst6' => 'bankCardNoFirst6',
        'bankCardNoLast4' => 'bankCardNoLast4',
        'mobilePhoneNo' => 'mobilePhoneNo',
        'bindId' => 'bindId',
        'cardName' => 'cardName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bankId' => 'setBankId',
        'cardType' => 'setCardType',
        'bankCardNo' => 'setBankCardNo',
        'bankCardNoFirst6' => 'setBankCardNoFirst6',
        'bankCardNoLast4' => 'setBankCardNoLast4',
        'mobilePhoneNo' => 'setMobilePhoneNo',
        'bindId' => 'setBindId',
        'cardName' => 'setCardName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bankId' => 'getBankId',
        'cardType' => 'getCardType',
        'bankCardNo' => 'getBankCardNo',
        'bankCardNoFirst6' => 'getBankCardNoFirst6',
        'bankCardNoLast4' => 'getBankCardNoLast4',
        'mobilePhoneNo' => 'getMobilePhoneNo',
        'bindId' => 'getBindId',
        'cardName' => 'getCardName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bankId'] = isset($data['bankId']) ? $data['bankId'] : null;
        $this->container['cardType'] = isset($data['cardType']) ? $data['cardType'] : null;
        $this->container['bankCardNo'] = isset($data['bankCardNo']) ? $data['bankCardNo'] : null;
        $this->container['bankCardNoFirst6'] = isset($data['bankCardNoFirst6']) ? $data['bankCardNoFirst6'] : null;
        $this->container['bankCardNoLast4'] = isset($data['bankCardNoLast4']) ? $data['bankCardNoLast4'] : null;
        $this->container['mobilePhoneNo'] = isset($data['mobilePhoneNo']) ? $data['mobilePhoneNo'] : null;
        $this->container['bindId'] = isset($data['bindId']) ? $data['bindId'] : null;
        $this->container['cardName'] = isset($data['cardName']) ? $data['cardName'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bankId
     *
     * @return string
     */
    public function getBankId()
    {
        return $this->container['bankId'];
    }

    /**
     * Sets bankId
     *
     * @param string $bankId 银行编码
     *
     * @return $this
     */
    public function setBankId($bankId)
    {
        $this->container['bankId'] = $bankId;

        return $this;
    }

    /**
     * Gets cardType
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['cardType'];
    }

    /**
     * Sets cardType
     *
     * @param string $cardType 卡类型
     *
     * @return $this
     */
    public function setCardType($cardType)
    {
        $this->container['cardType'] = $cardType;

        return $this;
    }

    /**
     * Gets bankCardNo
     *
     * @return string
     */
    public function getBankCardNo()
    {
        return $this->container['bankCardNo'];
    }

    /**
     * Sets bankCardNo
     *
     * @param string $bankCardNo 银行卡号
     *
     * @return $this
     */
    public function setBankCardNo($bankCardNo)
    {
        $this->container['bankCardNo'] = $bankCardNo;

        return $this;
    }

    /**
     * Gets bankCardNoFirst6
     *
     * @return string
     */
    public function getBankCardNoFirst6()
    {
        return $this->container['bankCardNoFirst6'];
    }

    /**
     * Sets bankCardNoFirst6
     *
     * @param string $bankCardNoFirst6 银行卡号前6位
     *
     * @return $this
     */
    public function setBankCardNoFirst6($bankCardNoFirst6)
    {
        $this->container['bankCardNoFirst6'] = $bankCardNoFirst6;

        return $this;
    }

    /**
     * Gets bankCardNoLast4
     *
     * @return string
     */
    public function getBankCardNoLast4()
    {
        return $this->container['bankCardNoLast4'];
    }

    /**
     * Sets bankCardNoLast4
     *
     * @param string $bankCardNoLast4 银行卡号后4位
     *
     * @return $this
     */
    public function setBankCardNoLast4($bankCardNoLast4)
    {
        $this->container['bankCardNoLast4'] = $bankCardNoLast4;

        return $this;
    }

    /**
     * Gets mobilePhoneNo
     *
     * @return string
     */
    public function getMobilePhoneNo()
    {
        return $this->container['mobilePhoneNo'];
    }

    /**
     * Sets mobilePhoneNo
     *
     * @param string $mobilePhoneNo 手机号
     *
     * @return $this
     */
    public function setMobilePhoneNo($mobilePhoneNo)
    {
        $this->container['mobilePhoneNo'] = $mobilePhoneNo;

        return $this;
    }

    /**
     * Gets bindId
     *
     * @return string
     */
    public function getBindId()
    {
        return $this->container['bindId'];
    }

    /**
     * Sets bindId
     *
     * @param string $bindId 未命名
     *
     * @return $this
     */
    public function setBindId($bindId)
    {
        $this->container['bindId'] = $bindId;

        return $this;
    }

    /**
     * Gets cardName
     *
     * @return string
     */
    public function getCardName()
    {
        return $this->container['cardName'];
    }

    /**
     * Sets cardName
     *
     * @param string $cardName 持卡人姓名
     *
     * @return $this
     */
    public function setCardName($cardName)
    {
        $this->container['cardName'] = $cardName;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


