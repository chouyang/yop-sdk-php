<?php
/**
 * QrCodeCfgInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 线下业务
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Offline\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * QrCodeCfgInfo Class Doc Comment
 *
 * @category Class
 * @description 请修改我
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class QrCodeCfgInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'QrCodeCfgInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fillRemark' => 'string',
        'type' => 'string',
        'remarkTitle' => 'string',
        'remarkOption' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fillRemark' => null,
        'type' => null,
        'remarkTitle' => null,
        'remarkOption' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fillRemark' => 'fillRemark',
        'type' => 'type',
        'remarkTitle' => 'remarkTitle',
        'remarkOption' => 'remarkOption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fillRemark' => 'setFillRemark',
        'type' => 'setType',
        'remarkTitle' => 'setRemarkTitle',
        'remarkOption' => 'setRemarkOption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fillRemark' => 'getFillRemark',
        'type' => 'getType',
        'remarkTitle' => 'getRemarkTitle',
        'remarkOption' => 'getRemarkOption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fillRemark'] = isset($data['fillRemark']) ? $data['fillRemark'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['remarkTitle'] = isset($data['remarkTitle']) ? $data['remarkTitle'] : null;
        $this->container['remarkOption'] = isset($data['remarkOption']) ? $data['remarkOption'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fillRemark
     *
     * @return string
     */
    public function getFillRemark()
    {
        return $this->container['fillRemark'];
    }

    /**
     * Sets fillRemark
     *
     * @param string $fillRemark <pre>是否必填 0-非必填 1-必填</pre>
     *
     * @return $this
     */
    public function setFillRemark($fillRemark)
    {
        $this->container['fillRemark'] = $fillRemark;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type <pre>备注类型，0：输入框，1：选择框</pre>
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets remarkTitle
     *
     * @return string
     */
    public function getRemarkTitle()
    {
        return $this->container['remarkTitle'];
    }

    /**
     * Sets remarkTitle
     *
     * @param string $remarkTitle <pre>备注名称</pre>
     *
     * @return $this
     */
    public function setRemarkTitle($remarkTitle)
    {
        $this->container['remarkTitle'] = $remarkTitle;

        return $this;
    }

    /**
     * Gets remarkOption
     *
     * @return string
     */
    public function getRemarkOption()
    {
        return $this->container['remarkOption'];
    }

    /**
     * Sets remarkOption
     *
     * @param string $remarkOption <div data-page-id=\"VoiAdYd9zoEOtbxLJ48crFZjnth\" data-docx-has-block-data=\"false\"> <div class=\"ace-line ace-line old-record-id-AknfdO7i2oz4yCxgiXOcPBtsnjb\">备注选项选项（多个选项逗号相隔，2到10个）,type为1的时候必填</div> </div>
     *
     * @return $this
     */
    public function setRemarkOption($remarkOption)
    {
        $this->container['remarkOption'] = $remarkOption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


