<?php
/**
 * CreditScoreCreateResponseDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 聚合支付
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Aggpay\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * CreditScoreCreateResponseDTO Class Doc Comment
 *
 * @category Class
 * @description 请修改我
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditScoreCreateResponseDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreditScoreCreateResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'uniqueCreditNo' => 'string',
        'creditOrderId' => 'string',
        'code' => 'string',
        'bankSerialNo' => 'string',
        'bankOrderNo' => 'string',
        'message' => 'string',
        'packageInfo' => 'string',
        'merchantNo' => 'string',
        'reportMerchantNo' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'uniqueCreditNo' => null,
        'creditOrderId' => null,
        'code' => null,
        'bankSerialNo' => null,
        'bankOrderNo' => null,
        'message' => null,
        'packageInfo' => null,
        'merchantNo' => null,
        'reportMerchantNo' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uniqueCreditNo' => 'uniqueCreditNo',
        'creditOrderId' => 'creditOrderId',
        'code' => 'code',
        'bankSerialNo' => 'bankSerialNo',
        'bankOrderNo' => 'bankOrderNo',
        'message' => 'message',
        'packageInfo' => 'packageInfo',
        'merchantNo' => 'merchantNo',
        'reportMerchantNo' => 'reportMerchantNo',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uniqueCreditNo' => 'setUniqueCreditNo',
        'creditOrderId' => 'setCreditOrderId',
        'code' => 'setCode',
        'bankSerialNo' => 'setBankSerialNo',
        'bankOrderNo' => 'setBankOrderNo',
        'message' => 'setMessage',
        'packageInfo' => 'setPackageInfo',
        'merchantNo' => 'setMerchantNo',
        'reportMerchantNo' => 'setReportMerchantNo',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uniqueCreditNo' => 'getUniqueCreditNo',
        'creditOrderId' => 'getCreditOrderId',
        'code' => 'getCode',
        'bankSerialNo' => 'getBankSerialNo',
        'bankOrderNo' => 'getBankOrderNo',
        'message' => 'getMessage',
        'packageInfo' => 'getPackageInfo',
        'merchantNo' => 'getMerchantNo',
        'reportMerchantNo' => 'getReportMerchantNo',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['uniqueCreditNo'] = isset($data['uniqueCreditNo']) ? $data['uniqueCreditNo'] : null;
        $this->container['creditOrderId'] = isset($data['creditOrderId']) ? $data['creditOrderId'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['bankSerialNo'] = isset($data['bankSerialNo']) ? $data['bankSerialNo'] : null;
        $this->container['bankOrderNo'] = isset($data['bankOrderNo']) ? $data['bankOrderNo'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['packageInfo'] = isset($data['packageInfo']) ? $data['packageInfo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['reportMerchantNo'] = isset($data['reportMerchantNo']) ? $data['reportMerchantNo'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uniqueCreditNo
     *
     * @return string
     */
    public function getUniqueCreditNo()
    {
        return $this->container['uniqueCreditNo'];
    }

    /**
     * Sets uniqueCreditNo
     *
     * @param string $uniqueCreditNo uniqueCreditNo
     *
     * @return $this
     */
    public function setUniqueCreditNo($uniqueCreditNo)
    {
        $this->container['uniqueCreditNo'] = $uniqueCreditNo;

        return $this;
    }

    /**
     * Gets creditOrderId
     *
     * @return string
     */
    public function getCreditOrderId()
    {
        return $this->container['creditOrderId'];
    }

    /**
     * Sets creditOrderId
     *
     * @param string $creditOrderId creditOrderId
     *
     * @return $this
     */
    public function setCreditOrderId($creditOrderId)
    {
        $this->container['creditOrderId'] = $creditOrderId;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets bankSerialNo
     *
     * @return string
     */
    public function getBankSerialNo()
    {
        return $this->container['bankSerialNo'];
    }

    /**
     * Sets bankSerialNo
     *
     * @param string $bankSerialNo bankSerialNo
     *
     * @return $this
     */
    public function setBankSerialNo($bankSerialNo)
    {
        $this->container['bankSerialNo'] = $bankSerialNo;

        return $this;
    }

    /**
     * Gets bankOrderNo
     *
     * @return string
     */
    public function getBankOrderNo()
    {
        return $this->container['bankOrderNo'];
    }

    /**
     * Sets bankOrderNo
     *
     * @param string $bankOrderNo bankOrderNo
     *
     * @return $this
     */
    public function setBankOrderNo($bankOrderNo)
    {
        $this->container['bankOrderNo'] = $bankOrderNo;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets packageInfo
     *
     * @return string
     */
    public function getPackageInfo()
    {
        return $this->container['packageInfo'];
    }

    /**
     * Sets packageInfo
     *
     * @param string $packageInfo packageInfo
     *
     * @return $this
     */
    public function setPackageInfo($packageInfo)
    {
        $this->container['packageInfo'] = $packageInfo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo merchantNo
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets reportMerchantNo
     *
     * @return string
     */
    public function getReportMerchantNo()
    {
        return $this->container['reportMerchantNo'];
    }

    /**
     * Sets reportMerchantNo
     *
     * @param string $reportMerchantNo reportMerchantNo
     *
     * @return $this
     */
    public function setReportMerchantNo($reportMerchantNo)
    {
        $this->container['reportMerchantNo'] = $reportMerchantNo;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


