<?php
/**
 * ReceiverCallbackInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 子商户管理
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Mer\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * ReceiverCallbackInfo Class Doc Comment
 *
 * @category Class
 * @description 入账方信息
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReceiverCallbackInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReceiverCallbackInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'receiverNo' => 'string',
        'receiverType' => 'string',
        'receiverName' => 'string',
        'licenceNo' => 'string',
        'bankCardNo' => 'string',
        'signUrl' => 'string',
        'merchantSignUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'receiverNo' => null,
        'receiverType' => null,
        'receiverName' => null,
        'licenceNo' => null,
        'bankCardNo' => null,
        'signUrl' => null,
        'merchantSignUrl' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'receiverNo' => 'receiverNo',
        'receiverType' => 'receiverType',
        'receiverName' => 'receiverName',
        'licenceNo' => 'licenceNo',
        'bankCardNo' => 'bankCardNo',
        'signUrl' => 'signUrl',
        'merchantSignUrl' => 'merchantSignUrl'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'receiverNo' => 'setReceiverNo',
        'receiverType' => 'setReceiverType',
        'receiverName' => 'setReceiverName',
        'licenceNo' => 'setLicenceNo',
        'bankCardNo' => 'setBankCardNo',
        'signUrl' => 'setSignUrl',
        'merchantSignUrl' => 'setMerchantSignUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'receiverNo' => 'getReceiverNo',
        'receiverType' => 'getReceiverType',
        'receiverName' => 'getReceiverName',
        'licenceNo' => 'getLicenceNo',
        'bankCardNo' => 'getBankCardNo',
        'signUrl' => 'getSignUrl',
        'merchantSignUrl' => 'getMerchantSignUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['receiverNo'] = isset($data['receiverNo']) ? $data['receiverNo'] : null;
        $this->container['receiverType'] = isset($data['receiverType']) ? $data['receiverType'] : null;
        $this->container['receiverName'] = isset($data['receiverName']) ? $data['receiverName'] : null;
        $this->container['licenceNo'] = isset($data['licenceNo']) ? $data['licenceNo'] : null;
        $this->container['bankCardNo'] = isset($data['bankCardNo']) ? $data['bankCardNo'] : null;
        $this->container['signUrl'] = isset($data['signUrl']) ? $data['signUrl'] : null;
        $this->container['merchantSignUrl'] = isset($data['merchantSignUrl']) ? $data['merchantSignUrl'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets receiverNo
     *
     * @return string
     */
    public function getReceiverNo()
    {
        return $this->container['receiverNo'];
    }

    /**
     * Sets receiverNo
     *
     * @param string $receiverNo <p>入账方编号</p> <p>入账方唯一标识，用于查询、变更入账方信息。</p>
     *
     * @return $this
     */
    public function setReceiverNo($receiverNo)
    {
        $this->container['receiverNo'] = $receiverNo;

        return $this;
    }

    /**
     * Gets receiverType
     *
     * @return string
     */
    public function getReceiverType()
    {
        return $this->container['receiverType'];
    }

    /**
     * Sets receiverType
     *
     * @param string $receiverType <p>入账方类型</p> <div data-page-id=\"OY64dHLw1o1F9Ex1aTIcfgg5nHf\" data-docx-has-block-data=\"false\"> <div class=\"ace-line ace-line old-record-id-Xo2nd1JwUotHhSxvvfgcL9vWnob\">TO_PUBLIC 对公入账方</div> <div class=\"ace-line ace-line old-record-id-C5rUdOZMPou1T5xXEcEcisf2ndR\">TO_PRIVATE 对私入账方</div> </div>
     *
     * @return $this
     */
    public function setReceiverType($receiverType)
    {
        $this->container['receiverType'] = $receiverType;

        return $this;
    }

    /**
     * Gets receiverName
     *
     * @return string
     */
    public function getReceiverName()
    {
        return $this->container['receiverName'];
    }

    /**
     * Sets receiverName
     *
     * @param string $receiverName <p>账户名称</p>
     *
     * @return $this
     */
    public function setReceiverName($receiverName)
    {
        $this->container['receiverName'] = $receiverName;

        return $this;
    }

    /**
     * Gets licenceNo
     *
     * @return string
     */
    public function getLicenceNo()
    {
        return $this->container['licenceNo'];
    }

    /**
     * Sets licenceNo
     *
     * @param string $licenceNo <p>证件号</p>
     *
     * @return $this
     */
    public function setLicenceNo($licenceNo)
    {
        $this->container['licenceNo'] = $licenceNo;

        return $this;
    }

    /**
     * Gets bankCardNo
     *
     * @return string
     */
    public function getBankCardNo()
    {
        return $this->container['bankCardNo'];
    }

    /**
     * Sets bankCardNo
     *
     * @param string $bankCardNo <p>银行卡号</p>
     *
     * @return $this
     */
    public function setBankCardNo($bankCardNo)
    {
        $this->container['bankCardNo'] = $bankCardNo;

        return $this;
    }

    /**
     * Gets signUrl
     *
     * @return string
     */
    public function getSignUrl()
    {
        return $this->container['signUrl'];
    }

    /**
     * Sets signUrl
     *
     * @param string $signUrl <p>商户和入账方电子协议<br />入账方侧的签署链接</p>
     *
     * @return $this
     */
    public function setSignUrl($signUrl)
    {
        $this->container['signUrl'] = $signUrl;

        return $this;
    }

    /**
     * Gets merchantSignUrl
     *
     * @return string
     */
    public function getMerchantSignUrl()
    {
        return $this->container['merchantSignUrl'];
    }

    /**
     * Sets merchantSignUrl
     *
     * @param string $merchantSignUrl <pre>商户和入账方电子协议</pre> <pre>商户侧的签署链接</pre>
     *
     * @return $this
     */
    public function setMerchantSignUrl($merchantSignUrl)
    {
        $this->container['merchantSignUrl'] = $merchantSignUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


