<?php
/**
 * PayResponseDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 旅游资源
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\TravelResources\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * PayResponseDTO Class Doc Comment
 *
 * @category Class
 * @description 支付返回结果
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayResponseDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PayResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'payAmount' => 'float',
        'message' => 'string',
        'systemOrderNo' => 'string',
        'purchasePlatformId' => 'string',
        'paySuccessTime' => 'string',
        'parentMerchantNo' => 'string',
        'merchantRequestNo' => 'string',
        'status' => 'string',
        'merchantNo' => 'string',
        'parentMerchantRequestNo' => 'string',
        'purchaseType' => 'string',
        'trxType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'payAmount' => null,
        'message' => null,
        'systemOrderNo' => null,
        'purchasePlatformId' => null,
        'paySuccessTime' => null,
        'parentMerchantNo' => null,
        'merchantRequestNo' => null,
        'status' => null,
        'merchantNo' => null,
        'parentMerchantRequestNo' => null,
        'purchaseType' => null,
        'trxType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'payAmount' => 'payAmount',
        'message' => 'message',
        'systemOrderNo' => 'systemOrderNo',
        'purchasePlatformId' => 'purchasePlatformId',
        'paySuccessTime' => 'paySuccessTime',
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantRequestNo' => 'merchantRequestNo',
        'status' => 'status',
        'merchantNo' => 'merchantNo',
        'parentMerchantRequestNo' => 'parentMerchantRequestNo',
        'purchaseType' => 'purchaseType',
        'trxType' => 'trxType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'payAmount' => 'setPayAmount',
        'message' => 'setMessage',
        'systemOrderNo' => 'setSystemOrderNo',
        'purchasePlatformId' => 'setPurchasePlatformId',
        'paySuccessTime' => 'setPaySuccessTime',
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantRequestNo' => 'setMerchantRequestNo',
        'status' => 'setStatus',
        'merchantNo' => 'setMerchantNo',
        'parentMerchantRequestNo' => 'setParentMerchantRequestNo',
        'purchaseType' => 'setPurchaseType',
        'trxType' => 'setTrxType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'payAmount' => 'getPayAmount',
        'message' => 'getMessage',
        'systemOrderNo' => 'getSystemOrderNo',
        'purchasePlatformId' => 'getPurchasePlatformId',
        'paySuccessTime' => 'getPaySuccessTime',
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantRequestNo' => 'getMerchantRequestNo',
        'status' => 'getStatus',
        'merchantNo' => 'getMerchantNo',
        'parentMerchantRequestNo' => 'getParentMerchantRequestNo',
        'purchaseType' => 'getPurchaseType',
        'trxType' => 'getTrxType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['payAmount'] = isset($data['payAmount']) ? $data['payAmount'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['systemOrderNo'] = isset($data['systemOrderNo']) ? $data['systemOrderNo'] : null;
        $this->container['purchasePlatformId'] = isset($data['purchasePlatformId']) ? $data['purchasePlatformId'] : null;
        $this->container['paySuccessTime'] = isset($data['paySuccessTime']) ? $data['paySuccessTime'] : null;
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantRequestNo'] = isset($data['merchantRequestNo']) ? $data['merchantRequestNo'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['parentMerchantRequestNo'] = isset($data['parentMerchantRequestNo']) ? $data['parentMerchantRequestNo'] : null;
        $this->container['purchaseType'] = isset($data['purchaseType']) ? $data['purchaseType'] : null;
        $this->container['trxType'] = isset($data['trxType']) ? $data['trxType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['payAmount'] === null) {
            $invalidProperties[] = "'payAmount' can't be null";
        }
        if ($this->container['systemOrderNo'] === null) {
            $invalidProperties[] = "'systemOrderNo' can't be null";
        }
        if ($this->container['purchasePlatformId'] === null) {
            $invalidProperties[] = "'purchasePlatformId' can't be null";
        }
        if ($this->container['parentMerchantNo'] === null) {
            $invalidProperties[] = "'parentMerchantNo' can't be null";
        }
        if ($this->container['merchantRequestNo'] === null) {
            $invalidProperties[] = "'merchantRequestNo' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['merchantNo'] === null) {
            $invalidProperties[] = "'merchantNo' can't be null";
        }
        if ($this->container['purchaseType'] === null) {
            $invalidProperties[] = "'purchaseType' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code <p>代表本次请求成功，订单状态需要关注status</p>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets payAmount
     *
     * @return float
     */
    public function getPayAmount()
    {
        return $this->container['payAmount'];
    }

    /**
     * Sets payAmount
     *
     * @param float $payAmount <pre>支付金额</pre>
     *
     * @return $this
     */
    public function setPayAmount($payAmount)
    {
        $this->container['payAmount'] = $payAmount;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets systemOrderNo
     *
     * @return string
     */
    public function getSystemOrderNo()
    {
        return $this->container['systemOrderNo'];
    }

    /**
     * Sets systemOrderNo
     *
     * @param string $systemOrderNo <pre>请求渠道下单时传过去的订单号</pre>
     *
     * @return $this
     */
    public function setSystemOrderNo($systemOrderNo)
    {
        $this->container['systemOrderNo'] = $systemOrderNo;

        return $this;
    }

    /**
     * Gets purchasePlatformId
     *
     * @return string
     */
    public function getPurchasePlatformId()
    {
        return $this->container['purchasePlatformId'];
    }

    /**
     * Sets purchasePlatformId
     *
     * @param string $purchasePlatformId <pre>采购方在供应方的平台id</pre>
     *
     * @return $this
     */
    public function setPurchasePlatformId($purchasePlatformId)
    {
        $this->container['purchasePlatformId'] = $purchasePlatformId;

        return $this;
    }

    /**
     * Gets paySuccessTime
     *
     * @return string
     */
    public function getPaySuccessTime()
    {
        return $this->container['paySuccessTime'];
    }

    /**
     * Sets paySuccessTime
     *
     * @param string $paySuccessTime <p>支付成功时返回，支付成功时间</p>
     *
     * @return $this
     */
    public function setPaySuccessTime($paySuccessTime)
    {
        $this->container['paySuccessTime'] = $paySuccessTime;

        return $this;
    }

    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo <p>请求商编</p>
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantRequestNo
     *
     * @return string
     */
    public function getMerchantRequestNo()
    {
        return $this->container['merchantRequestNo'];
    }

    /**
     * Sets merchantRequestNo
     *
     * @param string $merchantRequestNo <pre>商编订单</pre>
     *
     * @return $this
     */
    public function setMerchantRequestNo($merchantRequestNo)
    {
        $this->container['merchantRequestNo'] = $merchantRequestNo;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status <pre>0：待支付</pre> <pre>1：支付成功</pre> <pre>2：支付失败</pre> <pre>3：已过期</pre>
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo <p>业务商编</p>
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets parentMerchantRequestNo
     *
     * @return string
     */
    public function getParentMerchantRequestNo()
    {
        return $this->container['parentMerchantRequestNo'];
    }

    /**
     * Sets parentMerchantRequestNo
     *
     * @param string $parentMerchantRequestNo <pre>请求方订单号</pre>
     *
     * @return $this
     */
    public function setParentMerchantRequestNo($parentMerchantRequestNo)
    {
        $this->container['parentMerchantRequestNo'] = $parentMerchantRequestNo;

        return $this;
    }

    /**
     * Gets purchaseType
     *
     * @return string
     */
    public function getPurchaseType()
    {
        return $this->container['purchaseType'];
    }

    /**
     * Sets purchaseType
     *
     * @param string $purchaseType <p>采购类型</p>
     *
     * @return $this
     */
    public function setPurchaseType($purchaseType)
    {
        $this->container['purchaseType'] = $purchaseType;

        return $this;
    }

    /**
     * Gets trxType
     *
     * @return string
     */
    public function getTrxType()
    {
        return $this->container['trxType'];
    }

    /**
     * Sets trxType
     *
     * @param string $trxType <p>在字段用来表示通知类型是交易还是退款。<br />只有在异步通知结果里该参数才有值</p>
     *
     * @return $this
     */
    public function setTrxType($trxType)
    {
        $this->container['trxType'] = $trxType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


