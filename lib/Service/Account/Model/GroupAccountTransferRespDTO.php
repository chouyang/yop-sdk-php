<?php
/**
 * GroupAccountTransferRespDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * GroupAccountTransferRespDTO Class Doc Comment
 *
 * @category Class
 * @description 集团账户划拨响应参数
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupAccountTransferRespDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GroupAccountTransferRespDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'returnCode' => 'string',
        'returnMsg' => 'string',
        'transferStatus' => 'string',
        'orderNo' => 'string',
        'requestNo' => 'string',
        'orderAmount' => 'string',
        'fromMerchantNo' => 'string',
        'toMerchantNo' => 'string',
        'createTime' => 'string',
        'finishTime' => 'string',
        'feeMerchantNo' => 'string',
        'debitAmount' => 'string',
        'receiveAmount' => 'string',
        'fee' => 'string',
        'usage' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'returnCode' => null,
        'returnMsg' => null,
        'transferStatus' => 'enum',
        'orderNo' => null,
        'requestNo' => null,
        'orderAmount' => null,
        'fromMerchantNo' => null,
        'toMerchantNo' => null,
        'createTime' => null,
        'finishTime' => null,
        'feeMerchantNo' => null,
        'debitAmount' => null,
        'receiveAmount' => null,
        'fee' => null,
        'usage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'returnCode' => 'returnCode',
        'returnMsg' => 'returnMsg',
        'transferStatus' => 'transferStatus',
        'orderNo' => 'orderNo',
        'requestNo' => 'requestNo',
        'orderAmount' => 'orderAmount',
        'fromMerchantNo' => 'fromMerchantNo',
        'toMerchantNo' => 'toMerchantNo',
        'createTime' => 'createTime',
        'finishTime' => 'finishTime',
        'feeMerchantNo' => 'feeMerchantNo',
        'debitAmount' => 'debitAmount',
        'receiveAmount' => 'receiveAmount',
        'fee' => 'fee',
        'usage' => 'usage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'returnCode' => 'setReturnCode',
        'returnMsg' => 'setReturnMsg',
        'transferStatus' => 'setTransferStatus',
        'orderNo' => 'setOrderNo',
        'requestNo' => 'setRequestNo',
        'orderAmount' => 'setOrderAmount',
        'fromMerchantNo' => 'setFromMerchantNo',
        'toMerchantNo' => 'setToMerchantNo',
        'createTime' => 'setCreateTime',
        'finishTime' => 'setFinishTime',
        'feeMerchantNo' => 'setFeeMerchantNo',
        'debitAmount' => 'setDebitAmount',
        'receiveAmount' => 'setReceiveAmount',
        'fee' => 'setFee',
        'usage' => 'setUsage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'returnCode' => 'getReturnCode',
        'returnMsg' => 'getReturnMsg',
        'transferStatus' => 'getTransferStatus',
        'orderNo' => 'getOrderNo',
        'requestNo' => 'getRequestNo',
        'orderAmount' => 'getOrderAmount',
        'fromMerchantNo' => 'getFromMerchantNo',
        'toMerchantNo' => 'getToMerchantNo',
        'createTime' => 'getCreateTime',
        'finishTime' => 'getFinishTime',
        'feeMerchantNo' => 'getFeeMerchantNo',
        'debitAmount' => 'getDebitAmount',
        'receiveAmount' => 'getReceiveAmount',
        'fee' => 'getFee',
        'usage' => 'getUsage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TRANSFER_STATUS_REQUEST_RECEIVE = 'REQUEST_RECEIVE';
    const TRANSFER_STATUS_SUCCESS = 'SUCCESS';
    const TRANSFER_STATUS_FAIL = 'FAIL';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTransferStatusAllowableValues()
    {
        return [
            self::TRANSFER_STATUS_REQUEST_RECEIVE,
            self::TRANSFER_STATUS_SUCCESS,
            self::TRANSFER_STATUS_FAIL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['returnCode'] = isset($data['returnCode']) ? $data['returnCode'] : null;
        $this->container['returnMsg'] = isset($data['returnMsg']) ? $data['returnMsg'] : null;
        $this->container['transferStatus'] = isset($data['transferStatus']) ? $data['transferStatus'] : null;
        $this->container['orderNo'] = isset($data['orderNo']) ? $data['orderNo'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['orderAmount'] = isset($data['orderAmount']) ? $data['orderAmount'] : null;
        $this->container['fromMerchantNo'] = isset($data['fromMerchantNo']) ? $data['fromMerchantNo'] : null;
        $this->container['toMerchantNo'] = isset($data['toMerchantNo']) ? $data['toMerchantNo'] : null;
        $this->container['createTime'] = isset($data['createTime']) ? $data['createTime'] : null;
        $this->container['finishTime'] = isset($data['finishTime']) ? $data['finishTime'] : null;
        $this->container['feeMerchantNo'] = isset($data['feeMerchantNo']) ? $data['feeMerchantNo'] : null;
        $this->container['debitAmount'] = isset($data['debitAmount']) ? $data['debitAmount'] : null;
        $this->container['receiveAmount'] = isset($data['receiveAmount']) ? $data['receiveAmount'] : null;
        $this->container['fee'] = isset($data['fee']) ? $data['fee'] : null;
        $this->container['usage'] = isset($data['usage']) ? $data['usage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTransferStatusAllowableValues();
        if (!is_null($this->container['transferStatus']) && !in_array($this->container['transferStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'transferStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets returnCode
     *
     * @return string
     */
    public function getReturnCode()
    {
        return $this->container['returnCode'];
    }

    /**
     * Sets returnCode
     *
     * @param string $returnCode <p>返回码该参数代表本次请求的处理结果，UA00000为请求成功 若请求失败参看对应错误码和错误信息</p>
     *
     * @return $this
     */
    public function setReturnCode($returnCode)
    {
        $this->container['returnCode'] = $returnCode;

        return $this;
    }

    /**
     * Gets returnMsg
     *
     * @return string
     */
    public function getReturnMsg()
    {
        return $this->container['returnMsg'];
    }

    /**
     * Sets returnMsg
     *
     * @param string $returnMsg <p>返回信息</p>
     *
     * @return $this
     */
    public function setReturnMsg($returnMsg)
    {
        $this->container['returnMsg'] = $returnMsg;

        return $this;
    }

    /**
     * Gets transferStatus
     *
     * @return string
     */
    public function getTransferStatus()
    {
        return $this->container['transferStatus'];
    }

    /**
     * Sets transferStatus
     *
     * @param string $transferStatus <p>状态</p> 可选项如下: REQUEST_RECEIVE:请求已接收(易宝正在处理中，请勿重复下单) SUCCESS:成功 FAIL:失败(该笔订单失败,可重新发起)
     *
     * @return $this
     */
    public function setTransferStatus($transferStatus)
    {
        $allowedValues = $this->getTransferStatusAllowableValues();
        if (!is_null($transferStatus) && !in_array($transferStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'transferStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['transferStatus'] = $transferStatus;

        return $this;
    }

    /**
     * Gets orderNo
     *
     * @return string
     */
    public function getOrderNo()
    {
        return $this->container['orderNo'];
    }

    /**
     * Sets orderNo
     *
     * @param string $orderNo <p>易宝订单号</p>
     *
     * @return $this
     */
    public function setOrderNo($orderNo)
    {
        $this->container['orderNo'] = $orderNo;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo <p>商户请求号</p>
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets orderAmount
     *
     * @return string
     */
    public function getOrderAmount()
    {
        return $this->container['orderAmount'];
    }

    /**
     * Sets orderAmount
     *
     * @param string $orderAmount <p>转账金额</p>
     *
     * @return $this
     */
    public function setOrderAmount($orderAmount)
    {
        $this->container['orderAmount'] = $orderAmount;

        return $this;
    }

    /**
     * Gets fromMerchantNo
     *
     * @return string
     */
    public function getFromMerchantNo()
    {
        return $this->container['fromMerchantNo'];
    }

    /**
     * Sets fromMerchantNo
     *
     * @param string $fromMerchantNo <p>转出方商户编号</p>
     *
     * @return $this
     */
    public function setFromMerchantNo($fromMerchantNo)
    {
        $this->container['fromMerchantNo'] = $fromMerchantNo;

        return $this;
    }

    /**
     * Gets toMerchantNo
     *
     * @return string
     */
    public function getToMerchantNo()
    {
        return $this->container['toMerchantNo'];
    }

    /**
     * Sets toMerchantNo
     *
     * @param string $toMerchantNo <p>转入方商户编号</p>
     *
     * @return $this
     */
    public function setToMerchantNo($toMerchantNo)
    {
        $this->container['toMerchantNo'] = $toMerchantNo;

        return $this;
    }

    /**
     * Gets createTime
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['createTime'];
    }

    /**
     * Sets createTime
     *
     * @param string $createTime <p>下单时间</p>
     *
     * @return $this
     */
    public function setCreateTime($createTime)
    {
        $this->container['createTime'] = $createTime;

        return $this;
    }

    /**
     * Gets finishTime
     *
     * @return string
     */
    public function getFinishTime()
    {
        return $this->container['finishTime'];
    }

    /**
     * Sets finishTime
     *
     * @param string $finishTime <p>完成时间<br />返回订单有明确结果（如订单状态为SUCCESS/FAIL）时的时间</p>
     *
     * @return $this
     */
    public function setFinishTime($finishTime)
    {
        $this->container['finishTime'] = $finishTime;

        return $this;
    }

    /**
     * Gets feeMerchantNo
     *
     * @return string
     */
    public function getFeeMerchantNo()
    {
        return $this->container['feeMerchantNo'];
    }

    /**
     * Sets feeMerchantNo
     *
     * @param string $feeMerchantNo <p>手续费承担方商户编号</p>
     *
     * @return $this
     */
    public function setFeeMerchantNo($feeMerchantNo)
    {
        $this->container['feeMerchantNo'] = $feeMerchantNo;

        return $this;
    }

    /**
     * Gets debitAmount
     *
     * @return string
     */
    public function getDebitAmount()
    {
        return $this->container['debitAmount'];
    }

    /**
     * Sets debitAmount
     *
     * @param string $debitAmount <p>扣账金额</p>
     *
     * @return $this
     */
    public function setDebitAmount($debitAmount)
    {
        $this->container['debitAmount'] = $debitAmount;

        return $this;
    }

    /**
     * Gets receiveAmount
     *
     * @return string
     */
    public function getReceiveAmount()
    {
        return $this->container['receiveAmount'];
    }

    /**
     * Sets receiveAmount
     *
     * @param string $receiveAmount <p>入账金额</p>
     *
     * @return $this
     */
    public function setReceiveAmount($receiveAmount)
    {
        $this->container['receiveAmount'] = $receiveAmount;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return string
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param string $fee <p>手续费</p>
     *
     * @return $this
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return string
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param string $usage <p>用途</p>
     *
     * @return $this
     */
    public function setUsage($usage)
    {
        $this->container['usage'] = $usage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


