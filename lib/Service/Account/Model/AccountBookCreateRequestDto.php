<?php
/**
 * AccountBookCreateRequestDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * AccountBookCreateRequestDto Class Doc Comment
 *
 * @category Class
 * @description 请修改我
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountBookCreateRequestDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountBookCreateRequestDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parentMerchantNo' => 'string',
        'merchantNo' => 'string',
        'merchantAccountBookNo' => 'string',
        'merchantAccountBookName' => 'string',
        'accountBookType' => 'string',
        'certificateType' => 'string',
        'certificateNo' => 'string',
        'bindCardList' => '\Yeepay\Yop\Sdk\Service\Account\Model\BindCardDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parentMerchantNo' => null,
        'merchantNo' => null,
        'merchantAccountBookNo' => null,
        'merchantAccountBookName' => null,
        'accountBookType' => 'enum',
        'certificateType' => 'enum',
        'certificateNo' => null,
        'bindCardList' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantNo' => 'merchantNo',
        'merchantAccountBookNo' => 'merchantAccountBookNo',
        'merchantAccountBookName' => 'merchantAccountBookName',
        'accountBookType' => 'accountBookType',
        'certificateType' => 'certificateType',
        'certificateNo' => 'certificateNo',
        'bindCardList' => 'bindCardList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'merchantAccountBookNo' => 'setMerchantAccountBookNo',
        'merchantAccountBookName' => 'setMerchantAccountBookName',
        'accountBookType' => 'setAccountBookType',
        'certificateType' => 'setCertificateType',
        'certificateNo' => 'setCertificateNo',
        'bindCardList' => 'setBindCardList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'merchantAccountBookNo' => 'getMerchantAccountBookNo',
        'merchantAccountBookName' => 'getMerchantAccountBookName',
        'accountBookType' => 'getAccountBookType',
        'certificateType' => 'getCertificateType',
        'certificateNo' => 'getCertificateNo',
        'bindCardList' => 'getBindCardList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNT_BOOK_TYPE_BUSINESS = 'BUSINESS';
    const ACCOUNT_BOOK_TYPE_PERSON = 'PERSON';
    const CERTIFICATE_TYPE_BIZ_LICENSEES = 'BIZ_LICENSEES';
    const CERTIFICATE_TYPE_ID_CARD = 'ID_CARD';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountBookTypeAllowableValues()
    {
        return [
            self::ACCOUNT_BOOK_TYPE_BUSINESS,
            self::ACCOUNT_BOOK_TYPE_PERSON,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCertificateTypeAllowableValues()
    {
        return [
            self::CERTIFICATE_TYPE_BIZ_LICENSEES,
            self::CERTIFICATE_TYPE_ID_CARD,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['merchantAccountBookNo'] = isset($data['merchantAccountBookNo']) ? $data['merchantAccountBookNo'] : null;
        $this->container['merchantAccountBookName'] = isset($data['merchantAccountBookName']) ? $data['merchantAccountBookName'] : null;
        $this->container['accountBookType'] = isset($data['accountBookType']) ? $data['accountBookType'] : null;
        $this->container['certificateType'] = isset($data['certificateType']) ? $data['certificateType'] : null;
        $this->container['certificateNo'] = isset($data['certificateNo']) ? $data['certificateNo'] : null;
        $this->container['bindCardList'] = isset($data['bindCardList']) ? $data['bindCardList'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['parentMerchantNo'] === null) {
            $invalidProperties[] = "'parentMerchantNo' can't be null";
        }
        if ($this->container['merchantNo'] === null) {
            $invalidProperties[] = "'merchantNo' can't be null";
        }
        if ($this->container['merchantAccountBookNo'] === null) {
            $invalidProperties[] = "'merchantAccountBookNo' can't be null";
        }
        $allowedValues = $this->getAccountBookTypeAllowableValues();
        if (!is_null($this->container['accountBookType']) && !in_array($this->container['accountBookType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accountBookType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCertificateTypeAllowableValues();
        if (!is_null($this->container['certificateType']) && !in_array($this->container['certificateType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'certificateType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo <p>发起方商户编号<br />标准商户收付款方案中此参数与商编一致，平台商户收付款方案中此参数为平台商商户编号</p>
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo <p>发起申请记账簿的商户编号</p>
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets merchantAccountBookNo
     *
     * @return string
     */
    public function getMerchantAccountBookNo()
    {
        return $this->container['merchantAccountBookNo'];
    }

    /**
     * Sets merchantAccountBookNo
     *
     * @param string $merchantAccountBookNo <p>商户侧记账簿编号数字、字母、下划线组合</p>
     *
     * @return $this
     */
    public function setMerchantAccountBookNo($merchantAccountBookNo)
    {
        $this->container['merchantAccountBookNo'] = $merchantAccountBookNo;

        return $this;
    }

    /**
     * Gets merchantAccountBookName
     *
     * @return string
     */
    public function getMerchantAccountBookName()
    {
        return $this->container['merchantAccountBookName'];
    }

    /**
     * Sets merchantAccountBookName
     *
     * @param string $merchantAccountBookName <p>记账簿名称<br />非必填，字符长度须小于等于50(记账簿收款使用&ldquo;记账薄预收款_银行汇款_标准版&rdquo;时，开立记账簿时必须传入&ldquo;记账簿名称&rdquo;)</p>
     *
     * @return $this
     */
    public function setMerchantAccountBookName($merchantAccountBookName)
    {
        $this->container['merchantAccountBookName'] = $merchantAccountBookName;

        return $this;
    }

    /**
     * Gets accountBookType
     *
     * @return string
     */
    public function getAccountBookType()
    {
        return $this->container['accountBookType'];
    }

    /**
     * Sets accountBookType
     *
     * @param string $accountBookType <p>记账薄类型（绑卡列表不为空时，该项必填 ）</p> 可选项如下: BUSINESS:企业 PERSON:个人
     *
     * @return $this
     */
    public function setAccountBookType($accountBookType)
    {
        $allowedValues = $this->getAccountBookTypeAllowableValues();
        if (!is_null($accountBookType) && !in_array($accountBookType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accountBookType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accountBookType'] = $accountBookType;

        return $this;
    }

    /**
     * Gets certificateType
     *
     * @return string
     */
    public function getCertificateType()
    {
        return $this->container['certificateType'];
    }

    /**
     * Sets certificateType
     *
     * @param string $certificateType <div data-page-id=\"DMqHd2ER3ob8iexqKTTc8uGUnQc\" data-docx-has-block-data=\"false\"> <div class=\" old-record-id-PQZ4dxCYHovLlFxpF4Sc9ZD7npc\">证件类型（绑卡列表不为空时，该项必填 ）</div> </div> 可选项如下: BIZ_LICENSEES:统一信用代码 ID_CARD:身份证
     *
     * @return $this
     */
    public function setCertificateType($certificateType)
    {
        $allowedValues = $this->getCertificateTypeAllowableValues();
        if (!is_null($certificateType) && !in_array($certificateType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'certificateType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['certificateType'] = $certificateType;

        return $this;
    }

    /**
     * Gets certificateNo
     *
     * @return string
     */
    public function getCertificateNo()
    {
        return $this->container['certificateNo'];
    }

    /**
     * Sets certificateNo
     *
     * @param string $certificateNo <div data-page-id=\"DMqHd2ER3ob8iexqKTTc8uGUnQc\" data-docx-has-block-data=\"false\"> <div class=\"ace-line ace-line old-record-id-LEefd74zmoWcaExb76AcaOJCndb\">证件号（绑卡列表不为空时，该项必填 ）</div> </div>
     *
     * @return $this
     */
    public function setCertificateNo($certificateNo)
    {
        $this->container['certificateNo'] = $certificateNo;

        return $this;
    }

    /**
     * Gets bindCardList
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\BindCardDTO[]
     */
    public function getBindCardList()
    {
        return $this->container['bindCardList'];
    }

    /**
     * Sets bindCardList
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\BindCardDTO[] $bindCardList <div data-page-id=\"DMqHd2ER3ob8iexqKTTc8uGUnQc\" data-docx-has-block-data=\"false\"> <div class=\"ace-line ace-line old-record-id-MmmtdMeXToa3dhxRi5UczeIkn3e\"> <div data-page-id=\"DMqHd2ER3ob8iexqKTTc8uGUnQc\" data-docx-has-block-data=\"false\"> <div class=\"ace-line ace-line old-record-id-MmmtdMeXToa3dhxRi5UczeIkn3e\">绑卡信息</div> </div> </div> </div>
     *
     * @return $this
     */
    public function setBindCardList($bindCardList)
    {
        $this->container['bindCardList'] = $bindCardList;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


