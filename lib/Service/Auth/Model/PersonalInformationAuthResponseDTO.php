<?php
/**
 * PersonalInformationAuthResponseDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 认证
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Auth\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * PersonalInformationAuthResponseDTO Class Doc Comment
 *
 * @category Class
 * @description 个人信息认证响应参数
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PersonalInformationAuthResponseDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PersonalInformationAuthResponseDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'requestNo' => 'string',
        'ybOrderId' => 'string',
        'authStatus' => 'string',
        'code' => 'string',
        'message' => 'string',
        'collectedFee' => 'string',
        'carrierType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'requestNo' => null,
        'ybOrderId' => null,
        'authStatus' => 'enum',
        'code' => null,
        'message' => null,
        'collectedFee' => null,
        'carrierType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'requestNo' => 'requestNo',
        'ybOrderId' => 'ybOrderId',
        'authStatus' => 'authStatus',
        'code' => 'code',
        'message' => 'message',
        'collectedFee' => 'collectedFee',
        'carrierType' => 'carrierType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'requestNo' => 'setRequestNo',
        'ybOrderId' => 'setYbOrderId',
        'authStatus' => 'setAuthStatus',
        'code' => 'setCode',
        'message' => 'setMessage',
        'collectedFee' => 'setCollectedFee',
        'carrierType' => 'setCarrierType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'requestNo' => 'getRequestNo',
        'ybOrderId' => 'getYbOrderId',
        'authStatus' => 'getAuthStatus',
        'code' => 'getCode',
        'message' => 'getMessage',
        'collectedFee' => 'getCollectedFee',
        'carrierType' => 'getCarrierType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUTH_STATUS_SUCCESS = 'SUCCESS';
    const AUTH_STATUS_FAILURE = 'FAILURE';
    const AUTH_STATUS_NOT_AUTH = 'NOT_AUTH';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuthStatusAllowableValues()
    {
        return [
            self::AUTH_STATUS_SUCCESS,
            self::AUTH_STATUS_FAILURE,
            self::AUTH_STATUS_NOT_AUTH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['ybOrderId'] = isset($data['ybOrderId']) ? $data['ybOrderId'] : null;
        $this->container['authStatus'] = isset($data['authStatus']) ? $data['authStatus'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['collectedFee'] = isset($data['collectedFee']) ? $data['collectedFee'] : null;
        $this->container['carrierType'] = isset($data['carrierType']) ? $data['carrierType'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['authStatus'] === null) {
            $invalidProperties[] = "'authStatus' can't be null";
        }
        $allowedValues = $this->getAuthStatusAllowableValues();
        if (!is_null($this->container['authStatus']) && !in_array($this->container['authStatus'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'authStatus', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['code'] === null) {
            $invalidProperties[] = "'code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo <p>商户请求号</p>
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets ybOrderId
     *
     * @return string
     */
    public function getYbOrderId()
    {
        return $this->container['ybOrderId'];
    }

    /**
     * Sets ybOrderId
     *
     * @param string $ybOrderId <p>易宝单号</p>
     *
     * @return $this
     */
    public function setYbOrderId($ybOrderId)
    {
        $this->container['ybOrderId'] = $ybOrderId;

        return $this;
    }

    /**
     * Gets authStatus
     *
     * @return string
     */
    public function getAuthStatus()
    {
        return $this->container['authStatus'];
    }

    /**
     * Sets authStatus
     *
     * @param string $authStatus <p>认证结果</p> <p>&nbsp;</p> 可选项如下: SUCCESS:认证通过 FAILURE:认证未通过 NOT_AUTH:未经认证 (业务流转过程失败, 未能拿到实际结果, 这个状态不能完全判定为信息有误)
     *
     * @return $this
     */
    public function setAuthStatus($authStatus)
    {
        $allowedValues = $this->getAuthStatusAllowableValues();
        if (!in_array($authStatus, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'authStatus', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['authStatus'] = $authStatus;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code <p>返回码, 00000: 成功, 其他请参照码表</p> <div data-page-id=\"LdaBdyEC8oDqJkxQAjyc3nd7nXf\" data-docx-has-block-data=\"true\">&nbsp;</div>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message <p>返回描述</p>
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets collectedFee
     *
     * @return string
     */
    public function getCollectedFee()
    {
        return $this->container['collectedFee'];
    }

    /**
     * Sets collectedFee
     *
     * @param string $collectedFee <p>计费标记:</p> <div> <pre>NO_NEED: 不计费</pre> <div> <pre>COLLECTED: 计费</pre> </div> </div>
     *
     * @return $this
     */
    public function setCollectedFee($collectedFee)
    {
        $this->container['collectedFee'] = $collectedFee;

        return $this;
    }

    /**
     * Gets carrierType
     *
     * @return string
     */
    public function getCarrierType()
    {
        return $this->container['carrierType'];
    }

    /**
     * Sets carrierType
     *
     * @param string $carrierType <div data-page-id=\"GCpHdnygLo9MyjxPUnNcAQsun5b\" data-docx-has-block-data=\"false\"> <div class=\"ace-line ace-line old-record-id-IA2FdTJKTof0EvxvUZ9cAEycned\">运营商类型：YD：移动 、LT：联通、DX：电信</div> </div>
     *
     * @return $this
     */
    public function setCarrierType($carrierType)
    {
        $this->container['carrierType'] = $carrierType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


