<?php
/**
 * AccountTradeRequestDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * AccountTradeRequestDTO Class Doc Comment
 *
 * @category Class
 * @description 多场景代付下单请求参数
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountTradeRequestDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountTradeRequestDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parentMerchantNo' => 'string',
        'merchantNo' => 'string',
        'requestNo' => 'string',
        'orderAmount' => 'float',
        'feeChargeSide' => 'string',
        'terminalType' => 'string',
        'receiveType' => 'string',
        'notifyUrl' => 'string',
        'remark' => 'string',
        'comments' => 'string',
        'receiptComments' => 'string',
        'riskInfo' => 'string',
        'receiverInfo' => '\Yeepay\Yop\Sdk\Service\Account\Model\ReceiverInfoDTO',
        'enterpriseInfo' => '\Yeepay\Yop\Sdk\Service\Account\Model\EnterpriseInfoDTO',
        'individualInfo' => '\Yeepay\Yop\Sdk\Service\Account\Model\IndividualInfoDTO'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parentMerchantNo' => null,
        'merchantNo' => null,
        'requestNo' => null,
        'orderAmount' => null,
        'feeChargeSide' => 'enum',
        'terminalType' => 'enum',
        'receiveType' => 'enum',
        'notifyUrl' => 'notify-url',
        'remark' => null,
        'comments' => null,
        'receiptComments' => null,
        'riskInfo' => null,
        'receiverInfo' => null,
        'enterpriseInfo' => null,
        'individualInfo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parentMerchantNo' => 'parentMerchantNo',
        'merchantNo' => 'merchantNo',
        'requestNo' => 'requestNo',
        'orderAmount' => 'orderAmount',
        'feeChargeSide' => 'feeChargeSide',
        'terminalType' => 'terminalType',
        'receiveType' => 'receiveType',
        'notifyUrl' => 'notifyUrl',
        'remark' => 'remark',
        'comments' => 'comments',
        'receiptComments' => 'receiptComments',
        'riskInfo' => 'riskInfo',
        'receiverInfo' => 'receiverInfo',
        'enterpriseInfo' => 'enterpriseInfo',
        'individualInfo' => 'individualInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parentMerchantNo' => 'setParentMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'requestNo' => 'setRequestNo',
        'orderAmount' => 'setOrderAmount',
        'feeChargeSide' => 'setFeeChargeSide',
        'terminalType' => 'setTerminalType',
        'receiveType' => 'setReceiveType',
        'notifyUrl' => 'setNotifyUrl',
        'remark' => 'setRemark',
        'comments' => 'setComments',
        'receiptComments' => 'setReceiptComments',
        'riskInfo' => 'setRiskInfo',
        'receiverInfo' => 'setReceiverInfo',
        'enterpriseInfo' => 'setEnterpriseInfo',
        'individualInfo' => 'setIndividualInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parentMerchantNo' => 'getParentMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'requestNo' => 'getRequestNo',
        'orderAmount' => 'getOrderAmount',
        'feeChargeSide' => 'getFeeChargeSide',
        'terminalType' => 'getTerminalType',
        'receiveType' => 'getReceiveType',
        'notifyUrl' => 'getNotifyUrl',
        'remark' => 'getRemark',
        'comments' => 'getComments',
        'receiptComments' => 'getReceiptComments',
        'riskInfo' => 'getRiskInfo',
        'receiverInfo' => 'getReceiverInfo',
        'enterpriseInfo' => 'getEnterpriseInfo',
        'individualInfo' => 'getIndividualInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FEE_CHARGE_SIDE_PAYER = 'PAYER';
    const FEE_CHARGE_SIDE_PAYEE = 'PAYEE';
    const TERMINAL_TYPE_PC = 'PC';
    const TERMINAL_TYPE_PHONE = 'PHONE';
    const TERMINAL_TYPE_PAD = 'PAD';
    const TERMINAL_TYPE_NFC = 'NFC';
    const TERMINAL_TYPE_DTV = 'DTV';
    const TERMINAL_TYPE_MPOS = 'MPOS';
    const TERMINAL_TYPE_OTHER = 'OTHER';
    const RECEIVE_TYPE_REAL_TIME = 'REAL_TIME';
    const RECEIVE_TYPE_TWO_HOUR = 'TWO_HOUR';
    const RECEIVE_TYPE_NEXT_DAY = 'NEXT_DAY';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFeeChargeSideAllowableValues()
    {
        return [
            self::FEE_CHARGE_SIDE_PAYER,
            self::FEE_CHARGE_SIDE_PAYEE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTerminalTypeAllowableValues()
    {
        return [
            self::TERMINAL_TYPE_PC,
            self::TERMINAL_TYPE_PHONE,
            self::TERMINAL_TYPE_PAD,
            self::TERMINAL_TYPE_NFC,
            self::TERMINAL_TYPE_DTV,
            self::TERMINAL_TYPE_MPOS,
            self::TERMINAL_TYPE_OTHER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReceiveTypeAllowableValues()
    {
        return [
            self::RECEIVE_TYPE_REAL_TIME,
            self::RECEIVE_TYPE_TWO_HOUR,
            self::RECEIVE_TYPE_NEXT_DAY,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parentMerchantNo'] = isset($data['parentMerchantNo']) ? $data['parentMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['requestNo'] = isset($data['requestNo']) ? $data['requestNo'] : null;
        $this->container['orderAmount'] = isset($data['orderAmount']) ? $data['orderAmount'] : null;
        $this->container['feeChargeSide'] = isset($data['feeChargeSide']) ? $data['feeChargeSide'] : null;
        $this->container['terminalType'] = isset($data['terminalType']) ? $data['terminalType'] : null;
        $this->container['receiveType'] = isset($data['receiveType']) ? $data['receiveType'] : null;
        $this->container['notifyUrl'] = isset($data['notifyUrl']) ? $data['notifyUrl'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['receiptComments'] = isset($data['receiptComments']) ? $data['receiptComments'] : null;
        $this->container['riskInfo'] = isset($data['riskInfo']) ? $data['riskInfo'] : null;
        $this->container['receiverInfo'] = isset($data['receiverInfo']) ? $data['receiverInfo'] : null;
        $this->container['enterpriseInfo'] = isset($data['enterpriseInfo']) ? $data['enterpriseInfo'] : null;
        $this->container['individualInfo'] = isset($data['individualInfo']) ? $data['individualInfo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['parentMerchantNo'] === null) {
            $invalidProperties[] = "'parentMerchantNo' can't be null";
        }
        if ($this->container['merchantNo'] === null) {
            $invalidProperties[] = "'merchantNo' can't be null";
        }
        if ($this->container['requestNo'] === null) {
            $invalidProperties[] = "'requestNo' can't be null";
        }
        if ($this->container['orderAmount'] === null) {
            $invalidProperties[] = "'orderAmount' can't be null";
        }
        $allowedValues = $this->getFeeChargeSideAllowableValues();
        if (!is_null($this->container['feeChargeSide']) && !in_array($this->container['feeChargeSide'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'feeChargeSide', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTerminalTypeAllowableValues();
        if (!is_null($this->container['terminalType']) && !in_array($this->container['terminalType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'terminalType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['receiveType'] === null) {
            $invalidProperties[] = "'receiveType' can't be null";
        }
        $allowedValues = $this->getReceiveTypeAllowableValues();
        if (!is_null($this->container['receiveType']) && !in_array($this->container['receiveType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'receiveType', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['receiverInfo'] === null) {
            $invalidProperties[] = "'receiverInfo' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parentMerchantNo
     *
     * @return string
     */
    public function getParentMerchantNo()
    {
        return $this->container['parentMerchantNo'];
    }

    /**
     * Sets parentMerchantNo
     *
     * @param string $parentMerchantNo <p>发起方商户编号<br />（标准商户收付款方案中此参数与商编一致，平台商户收付款方案中此参数为平台商商户编号）</p>
     *
     * @return $this
     */
    public function setParentMerchantNo($parentMerchantNo)
    {
        $this->container['parentMerchantNo'] = $parentMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo <p>商户编号<br />易宝支付分配的的商户唯一标识</p>
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets requestNo
     *
     * @return string
     */
    public function getRequestNo()
    {
        return $this->container['requestNo'];
    }

    /**
     * Sets requestNo
     *
     * @param string $requestNo <p>商户请求号<br />由商户自定义生成</p>
     *
     * @return $this
     */
    public function setRequestNo($requestNo)
    {
        $this->container['requestNo'] = $requestNo;

        return $this;
    }

    /**
     * Gets orderAmount
     *
     * @return float
     */
    public function getOrderAmount()
    {
        return $this->container['orderAmount'];
    }

    /**
     * Sets orderAmount
     *
     * @param float $orderAmount <p>付款金额<br />单位：元（RMB）</p>
     *
     * @return $this
     */
    public function setOrderAmount($orderAmount)
    {
        $this->container['orderAmount'] = $orderAmount;

        return $this;
    }

    /**
     * Gets feeChargeSide
     *
     * @return string
     */
    public function getFeeChargeSide()
    {
        return $this->container['feeChargeSide'];
    }

    /**
     * Sets feeChargeSide
     *
     * @param string $feeChargeSide <p>手续费承担方(若不传默认付款方)</p> 可选项如下: PAYER:付款方 PAYEE:收款方
     *
     * @return $this
     */
    public function setFeeChargeSide($feeChargeSide)
    {
        $allowedValues = $this->getFeeChargeSideAllowableValues();
        if (!is_null($feeChargeSide) && !in_array($feeChargeSide, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'feeChargeSide', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['feeChargeSide'] = $feeChargeSide;

        return $this;
    }

    /**
     * Gets terminalType
     *
     * @return string
     */
    public function getTerminalType()
    {
        return $this->container['terminalType'];
    }

    /**
     * Sets terminalType
     *
     * @param string $terminalType <p>终端类型<br /><br /><br /></p> 可选项如下: PC:电脑 PHONE:手机 PAD:平板 NFC:可穿戴设备 DTV:数字电视 MPOS:条码支付受理终端 OTHER:其他
     *
     * @return $this
     */
    public function setTerminalType($terminalType)
    {
        $allowedValues = $this->getTerminalTypeAllowableValues();
        if (!is_null($terminalType) && !in_array($terminalType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'terminalType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['terminalType'] = $terminalType;

        return $this;
    }

    /**
     * Gets receiveType
     *
     * @return string
     */
    public function getReceiveType()
    {
        return $this->container['receiveType'];
    }

    /**
     * Sets receiveType
     *
     * @param string $receiveType <p>到账类型</p> 可选项如下: REAL_TIME:实时 TWO_HOUR:两小时到账 NEXT_DAY:次日到账（无特殊情况资金于次日上午7点左右到收款银行账户中）
     *
     * @return $this
     */
    public function setReceiveType($receiveType)
    {
        $allowedValues = $this->getReceiveTypeAllowableValues();
        if (!in_array($receiveType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'receiveType', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['receiveType'] = $receiveType;

        return $this;
    }

    /**
     * Gets notifyUrl
     *
     * @return string
     */
    public function getNotifyUrl()
    {
        return $this->container['notifyUrl'];
    }

    /**
     * Sets notifyUrl
     *
     * @param string $notifyUrl <p>商户通知地址，不传则不通知</p>
     *
     * @return $this
     */
    public function setNotifyUrl($notifyUrl)
    {
        $this->container['notifyUrl'] = $notifyUrl;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark <p>备注信息</p>
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments <p>银行附言<br />展示在收款银行系统中的附言，由数字、字母、汉字组成（最终附言内容以银行实际账单为准）</p>
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets receiptComments
     *
     * @return string
     */
    public function getReceiptComments()
    {
        return $this->container['receiptComments'];
    }

    /**
     * Sets receiptComments
     *
     * @param string $receiptComments <p>回单备注，此字段值用于显示在回单中</p>
     *
     * @return $this
     */
    public function setReceiptComments($receiptComments)
    {
        $this->container['receiptComments'] = $receiptComments;

        return $this;
    }

    /**
     * Gets riskInfo
     *
     * @return string
     */
    public function getRiskInfo()
    {
        return $this->container['riskInfo'];
    }

    /**
     * Sets riskInfo
     *
     * @param string $riskInfo <p>透传风控标识json格式<br />replaceMerchantNo:代付方易宝商编<br />replaceName:代付方名称<br />jobType:职位类型<br />格式如下：{\"replaceMerchantNo\": \"\", \"replaceName\": \"\",\"jobType\": \"\"}</p>
     *
     * @return $this
     */
    public function setRiskInfo($riskInfo)
    {
        $this->container['riskInfo'] = $riskInfo;

        return $this;
    }

    /**
     * Gets receiverInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\ReceiverInfoDTO
     */
    public function getReceiverInfo()
    {
        return $this->container['receiverInfo'];
    }

    /**
     * Sets receiverInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\ReceiverInfoDTO $receiverInfo receiverInfo
     *
     * @return $this
     */
    public function setReceiverInfo($receiverInfo)
    {
        $this->container['receiverInfo'] = $receiverInfo;

        return $this;
    }

    /**
     * Gets enterpriseInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\EnterpriseInfoDTO
     */
    public function getEnterpriseInfo()
    {
        return $this->container['enterpriseInfo'];
    }

    /**
     * Sets enterpriseInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\EnterpriseInfoDTO $enterpriseInfo enterpriseInfo
     *
     * @return $this
     */
    public function setEnterpriseInfo($enterpriseInfo)
    {
        $this->container['enterpriseInfo'] = $enterpriseInfo;

        return $this;
    }

    /**
     * Gets individualInfo
     *
     * @return \Yeepay\Yop\Sdk\Service\Account\Model\IndividualInfoDTO
     */
    public function getIndividualInfo()
    {
        return $this->container['individualInfo'];
    }

    /**
     * Sets individualInfo
     *
     * @param \Yeepay\Yop\Sdk\Service\Account\Model\IndividualInfoDTO $individualInfo individualInfo
     *
     * @return $this
     */
    public function setIndividualInfo($individualInfo)
    {
        $this->container['individualInfo'] = $individualInfo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


