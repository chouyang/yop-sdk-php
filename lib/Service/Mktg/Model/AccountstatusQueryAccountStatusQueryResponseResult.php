<?php
/**
 * AccountstatusQueryAccountStatusQueryResponseResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 营销系统
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Mktg\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * AccountstatusQueryAccountStatusQueryResponseResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountstatusQueryAccountStatusQueryResponseResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountstatusQueryAccountStatusQueryResponseResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'bankCardNo' => 'string',
        'status' => 'string',
        'bindBankCardNo' => 'string',
        'mobile' => 'string',
        'openAccountTime' => 'string',
        'activeStatus' => 'string',
        'isOpenDocs' => 'string',
        'legalExpDate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'bankCardNo' => null,
        'status' => null,
        'bindBankCardNo' => null,
        'mobile' => null,
        'openAccountTime' => null,
        'activeStatus' => null,
        'isOpenDocs' => null,
        'legalExpDate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'bankCardNo' => 'bankCardNo',
        'status' => 'status',
        'bindBankCardNo' => 'bindBankCardNo',
        'mobile' => 'mobile',
        'openAccountTime' => 'openAccountTime',
        'activeStatus' => 'activeStatus',
        'isOpenDocs' => 'isOpenDocs',
        'legalExpDate' => 'legalExpDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'bankCardNo' => 'setBankCardNo',
        'status' => 'setStatus',
        'bindBankCardNo' => 'setBindBankCardNo',
        'mobile' => 'setMobile',
        'openAccountTime' => 'setOpenAccountTime',
        'activeStatus' => 'setActiveStatus',
        'isOpenDocs' => 'setIsOpenDocs',
        'legalExpDate' => 'setLegalExpDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'bankCardNo' => 'getBankCardNo',
        'status' => 'getStatus',
        'bindBankCardNo' => 'getBindBankCardNo',
        'mobile' => 'getMobile',
        'openAccountTime' => 'getOpenAccountTime',
        'activeStatus' => 'getActiveStatus',
        'isOpenDocs' => 'getIsOpenDocs',
        'legalExpDate' => 'getLegalExpDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['bankCardNo'] = isset($data['bankCardNo']) ? $data['bankCardNo'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['bindBankCardNo'] = isset($data['bindBankCardNo']) ? $data['bindBankCardNo'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['openAccountTime'] = isset($data['openAccountTime']) ? $data['openAccountTime'] : null;
        $this->container['activeStatus'] = isset($data['activeStatus']) ? $data['activeStatus'] : null;
        $this->container['isOpenDocs'] = isset($data['isOpenDocs']) ? $data['isOpenDocs'] : null;
        $this->container['legalExpDate'] = isset($data['legalExpDate']) ? $data['legalExpDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code 未命名
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message 返回信息描述
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets bankCardNo
     *
     * @return string
     */
    public function getBankCardNo()
    {
        return $this->container['bankCardNo'];
    }

    /**
     * Sets bankCardNo
     *
     * @param string $bankCardNo 银行电子账户号
     *
     * @return $this
     */
    public function setBankCardNo($bankCardNo)
    {
        $this->container['bankCardNo'] = $bankCardNo;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 账户状态
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets bindBankCardNo
     *
     * @return string
     */
    public function getBindBankCardNo()
    {
        return $this->container['bindBankCardNo'];
    }

    /**
     * Sets bindBankCardNo
     *
     * @param string $bindBankCardNo 绑定银行卡号
     *
     * @return $this
     */
    public function setBindBankCardNo($bindBankCardNo)
    {
        $this->container['bindBankCardNo'] = $bindBankCardNo;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile 手机号
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets openAccountTime
     *
     * @return string
     */
    public function getOpenAccountTime()
    {
        return $this->container['openAccountTime'];
    }

    /**
     * Sets openAccountTime
     *
     * @param string $openAccountTime 银行开户时间
     *
     * @return $this
     */
    public function setOpenAccountTime($openAccountTime)
    {
        $this->container['openAccountTime'] = $openAccountTime;

        return $this;
    }

    /**
     * Gets activeStatus
     *
     * @return string
     */
    public function getActiveStatus()
    {
        return $this->container['activeStatus'];
    }

    /**
     * Sets activeStatus
     *
     * @param string $activeStatus 激活状态
     *
     * @return $this
     */
    public function setActiveStatus($activeStatus)
    {
        $this->container['activeStatus'] = $activeStatus;

        return $this;
    }

    /**
     * Gets isOpenDocs
     *
     * @return string
     */
    public function getIsOpenDocs()
    {
        return $this->container['isOpenDocs'];
    }

    /**
     * Sets isOpenDocs
     *
     * @param string $isOpenDocs 是否留存开户资料
     *
     * @return $this
     */
    public function setIsOpenDocs($isOpenDocs)
    {
        $this->container['isOpenDocs'] = $isOpenDocs;

        return $this;
    }

    /**
     * Gets legalExpDate
     *
     * @return string
     */
    public function getLegalExpDate()
    {
        return $this->container['legalExpDate'];
    }

    /**
     * Sets legalExpDate
     *
     * @param string $legalExpDate 证件有效期
     *
     * @return $this
     */
    public function setLegalExpDate($legalExpDate)
    {
        $this->container['legalExpDate'] = $legalExpDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


