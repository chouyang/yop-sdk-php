<?php
/**
 * SmbLargeOpenAccountDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 账户
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Account\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * SmbLargeOpenAccountDTO Class Doc Comment
 *
 * @category Class
 * @description 苏商直连大额记账簿开户
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SmbLargeOpenAccountDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SmbLargeOpenAccountDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'businessLicenceEffectiveDate' => 'string',
        'businessLicenceExpirationDate' => 'string',
        'legalLicenceEffectiveDate' => 'string',
        'legalLicenceExpirationDate' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'businessLicenceEffectiveDate' => null,
        'businessLicenceExpirationDate' => null,
        'legalLicenceEffectiveDate' => null,
        'legalLicenceExpirationDate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'businessLicenceEffectiveDate' => 'businessLicenceEffectiveDate',
        'businessLicenceExpirationDate' => 'businessLicenceExpirationDate',
        'legalLicenceEffectiveDate' => 'legalLicenceEffectiveDate',
        'legalLicenceExpirationDate' => 'legalLicenceExpirationDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'businessLicenceEffectiveDate' => 'setBusinessLicenceEffectiveDate',
        'businessLicenceExpirationDate' => 'setBusinessLicenceExpirationDate',
        'legalLicenceEffectiveDate' => 'setLegalLicenceEffectiveDate',
        'legalLicenceExpirationDate' => 'setLegalLicenceExpirationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'businessLicenceEffectiveDate' => 'getBusinessLicenceEffectiveDate',
        'businessLicenceExpirationDate' => 'getBusinessLicenceExpirationDate',
        'legalLicenceEffectiveDate' => 'getLegalLicenceEffectiveDate',
        'legalLicenceExpirationDate' => 'getLegalLicenceExpirationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['businessLicenceEffectiveDate'] = isset($data['businessLicenceEffectiveDate']) ? $data['businessLicenceEffectiveDate'] : null;
        $this->container['businessLicenceExpirationDate'] = isset($data['businessLicenceExpirationDate']) ? $data['businessLicenceExpirationDate'] : null;
        $this->container['legalLicenceEffectiveDate'] = isset($data['legalLicenceEffectiveDate']) ? $data['legalLicenceEffectiveDate'] : null;
        $this->container['legalLicenceExpirationDate'] = isset($data['legalLicenceExpirationDate']) ? $data['legalLicenceExpirationDate'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['businessLicenceEffectiveDate'] === null) {
            $invalidProperties[] = "'businessLicenceEffectiveDate' can't be null";
        }
        if ($this->container['businessLicenceExpirationDate'] === null) {
            $invalidProperties[] = "'businessLicenceExpirationDate' can't be null";
        }
        if ($this->container['legalLicenceEffectiveDate'] === null) {
            $invalidProperties[] = "'legalLicenceEffectiveDate' can't be null";
        }
        if ($this->container['legalLicenceExpirationDate'] === null) {
            $invalidProperties[] = "'legalLicenceExpirationDate' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets businessLicenceEffectiveDate
     *
     * @return string
     */
    public function getBusinessLicenceEffectiveDate()
    {
        return $this->container['businessLicenceEffectiveDate'];
    }

    /**
     * Sets businessLicenceEffectiveDate
     *
     * @param string $businessLicenceEffectiveDate <p>营业执照生效日期格式<br />格式为yyyyMMdd</p>
     *
     * @return $this
     */
    public function setBusinessLicenceEffectiveDate($businessLicenceEffectiveDate)
    {
        $this->container['businessLicenceEffectiveDate'] = $businessLicenceEffectiveDate;

        return $this;
    }

    /**
     * Gets businessLicenceExpirationDate
     *
     * @return string
     */
    public function getBusinessLicenceExpirationDate()
    {
        return $this->container['businessLicenceExpirationDate'];
    }

    /**
     * Sets businessLicenceExpirationDate
     *
     * @param string $businessLicenceExpirationDate <p>营业执照失效日期<br />格式为yyyyMMdd，forever</p>
     *
     * @return $this
     */
    public function setBusinessLicenceExpirationDate($businessLicenceExpirationDate)
    {
        $this->container['businessLicenceExpirationDate'] = $businessLicenceExpirationDate;

        return $this;
    }

    /**
     * Gets legalLicenceEffectiveDate
     *
     * @return string
     */
    public function getLegalLicenceEffectiveDate()
    {
        return $this->container['legalLicenceEffectiveDate'];
    }

    /**
     * Sets legalLicenceEffectiveDate
     *
     * @param string $legalLicenceEffectiveDate <p>法人证件生效日期<br />格式为yyyyMMdd</p>
     *
     * @return $this
     */
    public function setLegalLicenceEffectiveDate($legalLicenceEffectiveDate)
    {
        $this->container['legalLicenceEffectiveDate'] = $legalLicenceEffectiveDate;

        return $this;
    }

    /**
     * Gets legalLicenceExpirationDate
     *
     * @return string
     */
    public function getLegalLicenceExpirationDate()
    {
        return $this->container['legalLicenceExpirationDate'];
    }

    /**
     * Sets legalLicenceExpirationDate
     *
     * @param string $legalLicenceExpirationDate <p>法人证件失效日期<br />格式为yyyyMMdd，forever</p>
     *
     * @return $this
     */
    public function setLegalLicenceExpirationDate($legalLicenceExpirationDate)
    {
        $this->container['legalLicenceExpirationDate'] = $legalLicenceExpirationDate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


