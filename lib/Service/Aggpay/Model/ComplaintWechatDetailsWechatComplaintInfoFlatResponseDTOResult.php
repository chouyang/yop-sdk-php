<?php
/**
 * ComplaintWechatDetailsWechatComplaintInfoFlatResponseDTOResult
 *
 * PHP version 5
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * 聚合支付
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Yeepay\Yop\Sdk\Service\Aggpay\Model;

use \ArrayAccess;
use Yeepay\Yop\Sdk\Model\ModelInterface;
use Yeepay\Yop\Sdk\Utils\ObjectSerializer;

/**
 * ComplaintWechatDetailsWechatComplaintInfoFlatResponseDTOResult Class Doc Comment
 *
 * @category Class
 * @package  Yeepay\Yop\Sdk\
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComplaintWechatDetailsWechatComplaintInfoFlatResponseDTOResult implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ComplaintWechatDetailsWechatComplaintInfoFlatResponseDTOResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'message' => 'string',
        'complaintNo' => 'string',
        'complaintTime' => 'string',
        'complaintDetail' => 'string',
        'complaintState' => 'string',
        'complaintOpenId' => 'string',
        'complaintContact' => 'string',
        'complaintCount' => 'int',
        'wechatMerchantNo' => 'string',
        'channelMerchantNo' => 'string',
        'merchantNo' => 'string',
        'isResponse' => 'bool',
        'wechatOrderNo' => 'string',
        'channelOrderNo' => 'string',
        'merchantOrderNo' => 'string',
        'amount' => 'string',
        'bankOrderNo' => 'string',
        'isFullRefunded' => 'bool',
        'tradeTime' => 'string',
        'refundTime' => 'string',
        'status' => 'string',
        'complaintMediaDTOList' => 'string',
        'processTime' => 'string',
        'processCode' => 'string',
        'processRemark' => 'string',
        'showNo' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'message' => null,
        'complaintNo' => null,
        'complaintTime' => null,
        'complaintDetail' => null,
        'complaintState' => null,
        'complaintOpenId' => null,
        'complaintContact' => null,
        'complaintCount' => 'int32',
        'wechatMerchantNo' => null,
        'channelMerchantNo' => null,
        'merchantNo' => null,
        'isResponse' => null,
        'wechatOrderNo' => null,
        'channelOrderNo' => null,
        'merchantOrderNo' => null,
        'amount' => null,
        'bankOrderNo' => null,
        'isFullRefunded' => null,
        'tradeTime' => null,
        'refundTime' => null,
        'status' => null,
        'complaintMediaDTOList' => null,
        'processTime' => null,
        'processCode' => null,
        'processRemark' => null,
        'showNo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'message' => 'message',
        'complaintNo' => 'complaintNo',
        'complaintTime' => 'complaintTime',
        'complaintDetail' => 'complaintDetail',
        'complaintState' => 'complaintState',
        'complaintOpenId' => 'complaintOpenId',
        'complaintContact' => 'complaintContact',
        'complaintCount' => 'complaintCount',
        'wechatMerchantNo' => 'wechatMerchantNo',
        'channelMerchantNo' => 'channelMerchantNo',
        'merchantNo' => 'merchantNo',
        'isResponse' => 'isResponse',
        'wechatOrderNo' => 'wechatOrderNo',
        'channelOrderNo' => 'channelOrderNo',
        'merchantOrderNo' => 'merchantOrderNo',
        'amount' => 'amount',
        'bankOrderNo' => 'bankOrderNo',
        'isFullRefunded' => 'isFullRefunded',
        'tradeTime' => 'tradeTime',
        'refundTime' => 'refundTime',
        'status' => 'status',
        'complaintMediaDTOList' => 'complaintMediaDTOList',
        'processTime' => 'processTime',
        'processCode' => 'processCode',
        'processRemark' => 'processRemark',
        'showNo' => 'showNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'message' => 'setMessage',
        'complaintNo' => 'setComplaintNo',
        'complaintTime' => 'setComplaintTime',
        'complaintDetail' => 'setComplaintDetail',
        'complaintState' => 'setComplaintState',
        'complaintOpenId' => 'setComplaintOpenId',
        'complaintContact' => 'setComplaintContact',
        'complaintCount' => 'setComplaintCount',
        'wechatMerchantNo' => 'setWechatMerchantNo',
        'channelMerchantNo' => 'setChannelMerchantNo',
        'merchantNo' => 'setMerchantNo',
        'isResponse' => 'setIsResponse',
        'wechatOrderNo' => 'setWechatOrderNo',
        'channelOrderNo' => 'setChannelOrderNo',
        'merchantOrderNo' => 'setMerchantOrderNo',
        'amount' => 'setAmount',
        'bankOrderNo' => 'setBankOrderNo',
        'isFullRefunded' => 'setIsFullRefunded',
        'tradeTime' => 'setTradeTime',
        'refundTime' => 'setRefundTime',
        'status' => 'setStatus',
        'complaintMediaDTOList' => 'setComplaintMediaDTOList',
        'processTime' => 'setProcessTime',
        'processCode' => 'setProcessCode',
        'processRemark' => 'setProcessRemark',
        'showNo' => 'setShowNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'message' => 'getMessage',
        'complaintNo' => 'getComplaintNo',
        'complaintTime' => 'getComplaintTime',
        'complaintDetail' => 'getComplaintDetail',
        'complaintState' => 'getComplaintState',
        'complaintOpenId' => 'getComplaintOpenId',
        'complaintContact' => 'getComplaintContact',
        'complaintCount' => 'getComplaintCount',
        'wechatMerchantNo' => 'getWechatMerchantNo',
        'channelMerchantNo' => 'getChannelMerchantNo',
        'merchantNo' => 'getMerchantNo',
        'isResponse' => 'getIsResponse',
        'wechatOrderNo' => 'getWechatOrderNo',
        'channelOrderNo' => 'getChannelOrderNo',
        'merchantOrderNo' => 'getMerchantOrderNo',
        'amount' => 'getAmount',
        'bankOrderNo' => 'getBankOrderNo',
        'isFullRefunded' => 'getIsFullRefunded',
        'tradeTime' => 'getTradeTime',
        'refundTime' => 'getRefundTime',
        'status' => 'getStatus',
        'complaintMediaDTOList' => 'getComplaintMediaDTOList',
        'processTime' => 'getProcessTime',
        'processCode' => 'getProcessCode',
        'processRemark' => 'getProcessRemark',
        'showNo' => 'getShowNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['complaintNo'] = isset($data['complaintNo']) ? $data['complaintNo'] : null;
        $this->container['complaintTime'] = isset($data['complaintTime']) ? $data['complaintTime'] : null;
        $this->container['complaintDetail'] = isset($data['complaintDetail']) ? $data['complaintDetail'] : null;
        $this->container['complaintState'] = isset($data['complaintState']) ? $data['complaintState'] : null;
        $this->container['complaintOpenId'] = isset($data['complaintOpenId']) ? $data['complaintOpenId'] : null;
        $this->container['complaintContact'] = isset($data['complaintContact']) ? $data['complaintContact'] : null;
        $this->container['complaintCount'] = isset($data['complaintCount']) ? $data['complaintCount'] : null;
        $this->container['wechatMerchantNo'] = isset($data['wechatMerchantNo']) ? $data['wechatMerchantNo'] : null;
        $this->container['channelMerchantNo'] = isset($data['channelMerchantNo']) ? $data['channelMerchantNo'] : null;
        $this->container['merchantNo'] = isset($data['merchantNo']) ? $data['merchantNo'] : null;
        $this->container['isResponse'] = isset($data['isResponse']) ? $data['isResponse'] : null;
        $this->container['wechatOrderNo'] = isset($data['wechatOrderNo']) ? $data['wechatOrderNo'] : null;
        $this->container['channelOrderNo'] = isset($data['channelOrderNo']) ? $data['channelOrderNo'] : null;
        $this->container['merchantOrderNo'] = isset($data['merchantOrderNo']) ? $data['merchantOrderNo'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['bankOrderNo'] = isset($data['bankOrderNo']) ? $data['bankOrderNo'] : null;
        $this->container['isFullRefunded'] = isset($data['isFullRefunded']) ? $data['isFullRefunded'] : null;
        $this->container['tradeTime'] = isset($data['tradeTime']) ? $data['tradeTime'] : null;
        $this->container['refundTime'] = isset($data['refundTime']) ? $data['refundTime'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['complaintMediaDTOList'] = isset($data['complaintMediaDTOList']) ? $data['complaintMediaDTOList'] : null;
        $this->container['processTime'] = isset($data['processTime']) ? $data['processTime'] : null;
        $this->container['processCode'] = isset($data['processCode']) ? $data['processCode'] : null;
        $this->container['processRemark'] = isset($data['processRemark']) ? $data['processRemark'] : null;
        $this->container['showNo'] = isset($data['showNo']) ? $data['showNo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code 返回码
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message 返回消息
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets complaintNo
     *
     * @return string
     */
    public function getComplaintNo()
    {
        return $this->container['complaintNo'];
    }

    /**
     * Sets complaintNo
     *
     * @param string $complaintNo 投诉单号
     *
     * @return $this
     */
    public function setComplaintNo($complaintNo)
    {
        $this->container['complaintNo'] = $complaintNo;

        return $this;
    }

    /**
     * Gets complaintTime
     *
     * @return string
     */
    public function getComplaintTime()
    {
        return $this->container['complaintTime'];
    }

    /**
     * Sets complaintTime
     *
     * @param string $complaintTime 投诉时间
     *
     * @return $this
     */
    public function setComplaintTime($complaintTime)
    {
        $this->container['complaintTime'] = $complaintTime;

        return $this;
    }

    /**
     * Gets complaintDetail
     *
     * @return string
     */
    public function getComplaintDetail()
    {
        return $this->container['complaintDetail'];
    }

    /**
     * Sets complaintDetail
     *
     * @param string $complaintDetail 投诉详情
     *
     * @return $this
     */
    public function setComplaintDetail($complaintDetail)
    {
        $this->container['complaintDetail'] = $complaintDetail;

        return $this;
    }

    /**
     * Gets complaintState
     *
     * @return string
     */
    public function getComplaintState()
    {
        return $this->container['complaintState'];
    }

    /**
     * Sets complaintState
     *
     * @param string $complaintState 投诉单状态
     *
     * @return $this
     */
    public function setComplaintState($complaintState)
    {
        $this->container['complaintState'] = $complaintState;

        return $this;
    }

    /**
     * Gets complaintOpenId
     *
     * @return string
     */
    public function getComplaintOpenId()
    {
        return $this->container['complaintOpenId'];
    }

    /**
     * Sets complaintOpenId
     *
     * @param string $complaintOpenId 投诉人openid
     *
     * @return $this
     */
    public function setComplaintOpenId($complaintOpenId)
    {
        $this->container['complaintOpenId'] = $complaintOpenId;

        return $this;
    }

    /**
     * Gets complaintContact
     *
     * @return string
     */
    public function getComplaintContact()
    {
        return $this->container['complaintContact'];
    }

    /**
     * Sets complaintContact
     *
     * @param string $complaintContact 投诉人联系方式
     *
     * @return $this
     */
    public function setComplaintContact($complaintContact)
    {
        $this->container['complaintContact'] = $complaintContact;

        return $this;
    }

    /**
     * Gets complaintCount
     *
     * @return int
     */
    public function getComplaintCount()
    {
        return $this->container['complaintCount'];
    }

    /**
     * Sets complaintCount
     *
     * @param int $complaintCount 用户投诉次数
     *
     * @return $this
     */
    public function setComplaintCount($complaintCount)
    {
        $this->container['complaintCount'] = $complaintCount;

        return $this;
    }

    /**
     * Gets wechatMerchantNo
     *
     * @return string
     */
    public function getWechatMerchantNo()
    {
        return $this->container['wechatMerchantNo'];
    }

    /**
     * Sets wechatMerchantNo
     *
     * @param string $wechatMerchantNo 微信商户号
     *
     * @return $this
     */
    public function setWechatMerchantNo($wechatMerchantNo)
    {
        $this->container['wechatMerchantNo'] = $wechatMerchantNo;

        return $this;
    }

    /**
     * Gets channelMerchantNo
     *
     * @return string
     */
    public function getChannelMerchantNo()
    {
        return $this->container['channelMerchantNo'];
    }

    /**
     * Sets channelMerchantNo
     *
     * @param string $channelMerchantNo 渠道商户号
     *
     * @return $this
     */
    public function setChannelMerchantNo($channelMerchantNo)
    {
        $this->container['channelMerchantNo'] = $channelMerchantNo;

        return $this;
    }

    /**
     * Gets merchantNo
     *
     * @return string
     */
    public function getMerchantNo()
    {
        return $this->container['merchantNo'];
    }

    /**
     * Sets merchantNo
     *
     * @param string $merchantNo 商户编号
     *
     * @return $this
     */
    public function setMerchantNo($merchantNo)
    {
        $this->container['merchantNo'] = $merchantNo;

        return $this;
    }

    /**
     * Gets isResponse
     *
     * @return bool
     */
    public function getIsResponse()
    {
        return $this->container['isResponse'];
    }

    /**
     * Sets isResponse
     *
     * @param bool $isResponse 是否有待回复留言
     *
     * @return $this
     */
    public function setIsResponse($isResponse)
    {
        $this->container['isResponse'] = $isResponse;

        return $this;
    }

    /**
     * Gets wechatOrderNo
     *
     * @return string
     */
    public function getWechatOrderNo()
    {
        return $this->container['wechatOrderNo'];
    }

    /**
     * Sets wechatOrderNo
     *
     * @param string $wechatOrderNo 微信订单号
     *
     * @return $this
     */
    public function setWechatOrderNo($wechatOrderNo)
    {
        $this->container['wechatOrderNo'] = $wechatOrderNo;

        return $this;
    }

    /**
     * Gets channelOrderNo
     *
     * @return string
     */
    public function getChannelOrderNo()
    {
        return $this->container['channelOrderNo'];
    }

    /**
     * Sets channelOrderNo
     *
     * @param string $channelOrderNo 渠道订单号
     *
     * @return $this
     */
    public function setChannelOrderNo($channelOrderNo)
    {
        $this->container['channelOrderNo'] = $channelOrderNo;

        return $this;
    }

    /**
     * Gets merchantOrderNo
     *
     * @return string
     */
    public function getMerchantOrderNo()
    {
        return $this->container['merchantOrderNo'];
    }

    /**
     * Sets merchantOrderNo
     *
     * @param string $merchantOrderNo 易宝商户订单号
     *
     * @return $this
     */
    public function setMerchantOrderNo($merchantOrderNo)
    {
        $this->container['merchantOrderNo'] = $merchantOrderNo;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string $amount 订单金额
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets bankOrderNo
     *
     * @return string
     */
    public function getBankOrderNo()
    {
        return $this->container['bankOrderNo'];
    }

    /**
     * Sets bankOrderNo
     *
     * @param string $bankOrderNo 银行订单号
     *
     * @return $this
     */
    public function setBankOrderNo($bankOrderNo)
    {
        $this->container['bankOrderNo'] = $bankOrderNo;

        return $this;
    }

    /**
     * Gets isFullRefunded
     *
     * @return bool
     */
    public function getIsFullRefunded()
    {
        return $this->container['isFullRefunded'];
    }

    /**
     * Sets isFullRefunded
     *
     * @param bool $isFullRefunded 投诉单是否已全额退款
     *
     * @return $this
     */
    public function setIsFullRefunded($isFullRefunded)
    {
        $this->container['isFullRefunded'] = $isFullRefunded;

        return $this;
    }

    /**
     * Gets tradeTime
     *
     * @return string
     */
    public function getTradeTime()
    {
        return $this->container['tradeTime'];
    }

    /**
     * Sets tradeTime
     *
     * @param string $tradeTime 交易时间
     *
     * @return $this
     */
    public function setTradeTime($tradeTime)
    {
        $this->container['tradeTime'] = $tradeTime;

        return $this;
    }

    /**
     * Gets refundTime
     *
     * @return string
     */
    public function getRefundTime()
    {
        return $this->container['refundTime'];
    }

    /**
     * Sets refundTime
     *
     * @param string $refundTime 未命名
     *
     * @return $this
     */
    public function setRefundTime($refundTime)
    {
        $this->container['refundTime'] = $refundTime;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 未命名
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets complaintMediaDTOList
     *
     * @return string
     */
    public function getComplaintMediaDTOList()
    {
        return $this->container['complaintMediaDTOList'];
    }

    /**
     * Sets complaintMediaDTOList
     *
     * @param string $complaintMediaDTOList 用户上传的投诉相关资料
     *
     * @return $this
     */
    public function setComplaintMediaDTOList($complaintMediaDTOList)
    {
        $this->container['complaintMediaDTOList'] = $complaintMediaDTOList;

        return $this;
    }

    /**
     * Gets processTime
     *
     * @return string
     */
    public function getProcessTime()
    {
        return $this->container['processTime'];
    }

    /**
     * Sets processTime
     *
     * @param string $processTime 处理时间
     *
     * @return $this
     */
    public function setProcessTime($processTime)
    {
        $this->container['processTime'] = $processTime;

        return $this;
    }

    /**
     * Gets processCode
     *
     * @return string
     */
    public function getProcessCode()
    {
        return $this->container['processCode'];
    }

    /**
     * Sets processCode
     *
     * @param string $processCode 商家处理结果码
     *
     * @return $this
     */
    public function setProcessCode($processCode)
    {
        $this->container['processCode'] = $processCode;

        return $this;
    }

    /**
     * Gets processRemark
     *
     * @return string
     */
    public function getProcessRemark()
    {
        return $this->container['processRemark'];
    }

    /**
     * Sets processRemark
     *
     * @param string $processRemark 商家处理备注
     *
     * @return $this
     */
    public function setProcessRemark($processRemark)
    {
        $this->container['processRemark'] = $processRemark;

        return $this;
    }

    /**
     * Gets showNo
     *
     * @return string
     */
    public function getShowNo()
    {
        return $this->container['showNo'];
    }

    /**
     * Sets showNo
     *
     * @param string $showNo 投诉展示单号
     *
     * @return $this
     */
    public function setShowNo($showNo)
    {
        $this->container['showNo'] = $showNo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


